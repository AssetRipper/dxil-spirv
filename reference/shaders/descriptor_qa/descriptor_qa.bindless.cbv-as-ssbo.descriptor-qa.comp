#version 460
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_EXT_scalar_block_layout : require
#extension GL_EXT_buffer_reference_uvec2 : require
#extension GL_EXT_samplerless_texture_functions : require
layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;

layout(buffer_reference) buffer uintPointer;

layout(buffer_reference, buffer_reference_align = 4) buffer uintPointer
{
    uint value;
};

layout(set = 7, binding = 0, std430) readonly buffer AtomicCounters
{
    uvec2 counters[];
} _33;

layout(set = 5, binding = 0, std430) readonly buffer BindlessCBV
{
    vec4 _m0[4096];
} _47[];

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint va_map_timestamp;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, scalar) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec3 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(set = 0, binding = 0) uniform texture2D _13[];
layout(set = 1, binding = 0) uniform samplerBuffer _17[];
layout(set = 1, binding = 0) uniform usamplerBuffer _21[];
layout(set = 1, binding = 0) uniform usamplerBuffer _24[];
layout(set = 4, binding = 0, r32ui) uniform writeonly uimageBuffer _28[];
layout(set = 4, binding = 0, r32ui) uniform writeonly uimageBuffer _36[];
layout(set = 3, binding = 0) uniform writeonly image2D _40[];

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _82 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_82 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _115 = QAHeapData.descriptor_count;
    uint _117 = QAHeapData.heap_index;
    uint _120 = QAGlobalData.va_map_timestamp;
    uvec3 _123 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _132 = QAGlobalData.live_status_table[_123.x >> 5u];
    uint _146 = ((uint(heap_offset >= _115) | (((_123.z & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_132 & (1u << (_123.x & 31u))) != 0u) ? 0u : 4u)) | ((_120 >= _123.y) ? 0u : 8u);
    if (_146 != 0u)
    {
        descriptor_qa_report_fault(_146, heap_offset, _123.x, _117, descriptor_type_mask, _123.z, instruction);
        return _115;
    }
    return heap_offset;
}

uint RobustPhysicalAtomicCounter(uvec2 _373, uint _374, uint _375)
{
    uint _388;
    if (any(notEqual(_373, uvec2(0u))))
    {
        uint _386 = atomicAdd(uintPointer(_373).value, _374);
        _388 = _386 + _375;
    }
    else
    {
        _388 = 0u;
    }
    return _388;
}

void main()
{
    float _157;
    if (gl_GlobalInvocationID.x > 2u)
    {
        uint _64 = descriptor_qa_check(registers._m5, 8u, 1u);
        _157 = _47[_64]._m0[0u].x;
    }
    else
    {
        _157 = 0.0;
    }
    float _170;
    if (gl_GlobalInvocationID.x > 3u)
    {
        uint _165 = descriptor_qa_check(registers._m5 + (gl_GlobalInvocationID.x + 1u), 8u, 2u);
        _170 = _47[_165]._m0[0u].x + _157;
    }
    else
    {
        _170 = _157;
    }
    float _182;
    if (gl_GlobalInvocationID.x > 4u)
    {
        uint _176 = descriptor_qa_check(registers._m0, 1u, 3u);
        _182 = texelFetch(_13[_176], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), int(0u)).x + _170;
    }
    else
    {
        _182 = _170;
    }
    float _196;
    if (gl_GlobalInvocationID.x > 5u)
    {
        uint _190 = descriptor_qa_check(registers._m0 + ((gl_GlobalInvocationID.x & 1u) + 1u), 1u, 4u);
        _196 = texelFetch(_13[_190], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), int(0u)).x + _182;
    }
    else
    {
        _196 = _182;
    }
    float _209;
    if (gl_GlobalInvocationID.x > 6u)
    {
        uint _203 = descriptor_qa_check(registers._m1 + 3u, 16u, 5u);
        _209 = texelFetch(_17[_203], int(gl_GlobalInvocationID.x)).x + _196;
    }
    else
    {
        _209 = _196;
    }
    float _222;
    if (gl_GlobalInvocationID.x > 7u)
    {
        uint _217 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 4u), 16u, 6u);
        _222 = texelFetch(_17[_217], int(gl_GlobalInvocationID.x)).x + _209;
    }
    else
    {
        _222 = _209;
    }
    float _236;
    if (gl_GlobalInvocationID.x > 8u)
    {
        uint _229 = descriptor_qa_check(registers._m1 + 6u, 16u, 7u);
        _236 = uintBitsToFloat(texelFetch(_21[_229], int(gl_GlobalInvocationID.x)).x) + _222;
    }
    else
    {
        _236 = _222;
    }
    float _250;
    if (gl_GlobalInvocationID.x > 9u)
    {
        uint _244 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 7u), 16u, 8u);
        _250 = uintBitsToFloat(texelFetch(_21[_244], int(gl_GlobalInvocationID.x)).x) + _236;
    }
    else
    {
        _250 = _236;
    }
    float _263;
    if (gl_GlobalInvocationID.x > 10u)
    {
        uint _256 = descriptor_qa_check(registers._m1 + 9u, 16u, 9u);
        _263 = uintBitsToFloat(texelFetch(_24[_256], int(gl_GlobalInvocationID.x)).x) + _250;
    }
    else
    {
        _263 = _250;
    }
    float _279;
    if (gl_GlobalInvocationID.x > 11u)
    {
        uint _272 = descriptor_qa_check(registers._m1 + ((gl_GlobalInvocationID.x & 1u) + 10u), 16u, 10u);
        _279 = uintBitsToFloat(texelFetch(_24[_272], int(gl_GlobalInvocationID.x >> 2u)).x) + _263;
    }
    else
    {
        _279 = _263;
    }
    if (gl_GlobalInvocationID.x > 1u)
    {
        uint _285 = descriptor_qa_check(registers._m4, 32u, 11u);
        uint _291 = descriptor_qa_check(registers._m4, 256u, 12u);
        imageStore(_28[_285], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_279)));
    }
    if (gl_GlobalInvocationID.x > 30u)
    {
        uint _305 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 1u), 32u, 13u);
        imageStore(_28[_305], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_279)));
    }
    if (gl_GlobalInvocationID.x > 40u)
    {
        uint _316 = descriptor_qa_check(registers._m4 + 3u, 32u, 14u);
        imageStore(_36[_316], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_279)));
    }
    if (gl_GlobalInvocationID.x > 50u)
    {
        uint _332 = descriptor_qa_check(registers._m4 + ((gl_GlobalInvocationID.x & 1u) + 4u), 32u, 15u);
        imageStore(_36[_332], int(gl_GlobalInvocationID.x), uvec4(floatBitsToUint(_279)));
    }
    if (gl_GlobalInvocationID.x > 80u)
    {
        uint _343 = descriptor_qa_check(registers._m3 + 6u, 2u, 16u);
        imageStore(_40[_343], ivec2(uvec2(gl_GlobalInvocationID.x, 0u)), vec4(_279));
    }
    if (gl_GlobalInvocationID.x > 90u)
    {
        uint _355 = descriptor_qa_check(registers._m3 + ((gl_GlobalInvocationID.x & 1u) + 7u), 2u, 17u);
        imageStore(_40[_355], ivec2(uvec2(0u, gl_GlobalInvocationID.x)), vec4(_279));
    }
    uint _363 = descriptor_qa_check(registers._m4, 32u, 18u);
    uint _369 = descriptor_qa_check(registers._m4, 256u, 19u);
    uvec2 _371 = _33.counters[_369];
    uint _390 = RobustPhysicalAtomicCounter(_371, 1u, 0u);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 425
; Schema: 0
OpCapability Shader
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability SampledBuffer
OpCapability ImageBuffer
OpCapability StorageImageWriteWithoutFormat
OpCapability RuntimeDescriptorArray
OpCapability UniformTexelBufferArrayDynamicIndexing
OpCapability StorageTexelBufferArrayDynamicIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint GLCompute %3 "main" %50
OpExecutionMode %3 LocalSize 1 1 1
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %31 "AtomicCounters"
OpMemberName %31 0 "counters"
OpName %44 "BindlessCBV"
OpName %66 "DescriptorHeapGlobalQAData"
OpMemberName %66 0 "failed_shader_hash"
OpMemberName %66 1 "failed_offset"
OpMemberName %66 2 "failed_heap"
OpMemberName %66 3 "failed_cookie"
OpMemberName %66 4 "fault_atomic"
OpMemberName %66 5 "failed_instruction"
OpMemberName %66 6 "failed_descriptor_type_mask"
OpMemberName %66 7 "actual_descriptor_type_mask"
OpMemberName %66 8 "fault_type"
OpMemberName %66 9 "va_map_timestamp"
OpMemberName %66 10 "live_status_table"
OpName %68 "QAGlobalData"
OpName %77 "descriptor_qa_report_fault"
OpName %70 "fault_type"
OpName %71 "heap_offset"
OpName %72 "cookie"
OpName %73 "heap_index"
OpName %74 "descriptor_type"
OpName %75 "actual_descriptor_type"
OpName %76 "instruction"
OpName %105 "DescriptorHeapQAData"
OpMemberName %105 0 "descriptor_count"
OpMemberName %105 1 "heap_index"
OpMemberName %105 2 "cookies_descriptor_info"
OpName %107 "QAHeapData"
OpName %112 "descriptor_qa_check"
OpName %109 "heap_offset"
OpName %110 "descriptor_type_mask"
OpName %111 "instruction"
OpName %376 "RobustPhysicalAtomicCounter"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %13 DescriptorSet 0
OpDecorate %13 Binding 0
OpDecorate %17 DescriptorSet 1
OpDecorate %17 Binding 0
OpDecorate %21 DescriptorSet 1
OpDecorate %21 Binding 0
OpDecorate %24 DescriptorSet 1
OpDecorate %24 Binding 0
OpDecorate %28 DescriptorSet 4
OpDecorate %28 Binding 0
OpDecorate %28 NonReadable
OpDecorate %30 ArrayStride 8
OpDecorate %31 Block
OpMemberDecorate %31 0 Offset 0
OpMemberDecorate %31 0 NonWritable
OpDecorate %33 DescriptorSet 7
OpDecorate %33 Binding 0
OpDecorate %33 AliasedPointer
OpDecorate %36 DescriptorSet 4
OpDecorate %36 Binding 0
OpDecorate %36 NonReadable
OpDecorate %40 DescriptorSet 3
OpDecorate %40 Binding 0
OpDecorate %40 NonReadable
OpDecorate %43 ArrayStride 16
OpDecorate %44 Block
OpMemberDecorate %44 0 NonWritable
OpMemberDecorate %44 0 Offset 0
OpDecorate %47 DescriptorSet 5
OpDecorate %47 Binding 0
OpDecorate %50 BuiltIn GlobalInvocationId
OpDecorate %65 ArrayStride 4
OpMemberDecorate %66 0 Offset 0
OpMemberDecorate %66 1 Offset 8
OpMemberDecorate %66 2 Offset 12
OpMemberDecorate %66 3 Offset 16
OpMemberDecorate %66 4 Offset 20
OpMemberDecorate %66 5 Offset 24
OpMemberDecorate %66 6 Offset 28
OpMemberDecorate %66 7 Offset 32
OpMemberDecorate %66 8 Offset 36
OpMemberDecorate %66 9 Offset 40
OpMemberDecorate %66 10 Offset 44
OpDecorate %66 Block
OpDecorate %68 DescriptorSet 10
OpDecorate %68 Binding 10
OpDecorate %104 ArrayStride 12
OpMemberDecorate %105 0 Offset 0
OpMemberDecorate %105 1 Offset 4
OpMemberDecorate %105 2 Offset 8
OpDecorate %105 Block
OpDecorate %107 DescriptorSet 10
OpDecorate %107 Binding 11
OpDecorate %107 NonWritable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpTypeFloat 32
%10 = OpTypeImage %9 2D 0 0 0 1 Unknown
%11 = OpTypeRuntimeArray %10
%12 = OpTypePointer UniformConstant %11
%13 = OpVariable %12 UniformConstant
%14 = OpTypeImage %9 Buffer 0 0 0 1 Unknown
%15 = OpTypeRuntimeArray %14
%16 = OpTypePointer UniformConstant %15
%17 = OpVariable %16 UniformConstant
%18 = OpTypeImage %5 Buffer 0 0 0 1 Unknown
%19 = OpTypeRuntimeArray %18
%20 = OpTypePointer UniformConstant %19
%21 = OpVariable %20 UniformConstant
%22 = OpTypeRuntimeArray %18
%23 = OpTypePointer UniformConstant %22
%24 = OpVariable %23 UniformConstant
%25 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%26 = OpTypeRuntimeArray %25
%27 = OpTypePointer UniformConstant %26
%28 = OpVariable %27 UniformConstant
%29 = OpTypeVector %5 2
%30 = OpTypeRuntimeArray %29
%31 = OpTypeStruct %30
%32 = OpTypePointer StorageBuffer %31
%33 = OpVariable %32 StorageBuffer
%34 = OpTypeRuntimeArray %25
%35 = OpTypePointer UniformConstant %34
%36 = OpVariable %35 UniformConstant
%37 = OpTypeImage %9 2D 0 0 0 2 Unknown
%38 = OpTypeRuntimeArray %37
%39 = OpTypePointer UniformConstant %38
%40 = OpVariable %39 UniformConstant
%41 = OpTypeVector %9 4
%42 = OpConstant %5 4096
%43 = OpTypeArray %41 %42
%44 = OpTypeStruct %43
%45 = OpTypeRuntimeArray %44
%46 = OpTypePointer StorageBuffer %45
%47 = OpVariable %46 StorageBuffer
%48 = OpTypeVector %5 3
%49 = OpTypePointer Input %48
%50 = OpVariable %49 Input
%51 = OpTypePointer Input %5
%53 = OpConstant %5 0
%55 = OpTypeBool
%57 = OpConstant %5 2
%58 = OpTypePointer StorageBuffer %44
%60 = OpTypePointer PushConstant %5
%62 = OpConstant %5 5
%65 = OpTypeRuntimeArray %5
%66 = OpTypeStruct %29 %5 %5 %5 %5 %5 %5 %5 %5 %5 %65
%67 = OpTypePointer StorageBuffer %66
%68 = OpVariable %67 StorageBuffer
%69 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%79 = OpTypePointer StorageBuffer %5
%81 = OpConstant %5 4
%83 = OpConstant %5 1
%88 = OpConstant %5 3
%92 = OpConstant %5 6
%94 = OpConstant %5 7
%96 = OpConstant %5 3735928559
%97 = OpConstantComposite %29 %96 %53
%98 = OpTypePointer StorageBuffer %29
%100 = OpConstant %5 72
%102 = OpConstant %5 8
%104 = OpTypeRuntimeArray %48
%105 = OpTypeStruct %5 %5 %104
%106 = OpTypePointer StorageBuffer %105
%107 = OpVariable %106 StorageBuffer
%108 = OpTypeFunction %5 %5 %5 %5
%119 = OpConstant %5 9
%121 = OpTypePointer StorageBuffer %48
%129 = OpConstant %5 31
%131 = OpConstant %5 10
%153 = OpTypePointer StorageBuffer %41
%158 = OpConstant %9 0
%172 = OpTypePointer UniformConstant %10
%198 = OpTypePointer UniformConstant %14
%204 = OpConstant %5 16
%224 = OpTypePointer UniformConstant %18
%231 = OpTypeVector %5 4
%265 = OpConstant %5 11
%281 = OpTypePointer UniformConstant %25
%286 = OpConstant %5 32
%292 = OpConstant %5 256
%293 = OpConstant %5 12
%298 = OpConstant %5 30
%306 = OpConstant %5 13
%311 = OpConstant %5 40
%317 = OpConstant %5 14
%323 = OpConstant %5 50
%333 = OpConstant %5 15
%337 = OpConstant %5 80
%338 = OpTypePointer UniformConstant %37
%348 = OpConstant %5 90
%356 = OpConstant %5 17
%364 = OpConstant %5 18
%370 = OpConstant %5 19
%372 = OpTypeFunction %5 %29 %5 %5
%380 = OpTypeVector %55 2
%381 = OpConstantNull %29
%384 = OpTypePointer PhysicalStorageBuffer %5
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %391
%391 = OpLabel
%52 = OpAccessChain %51 %50 %53
%54 = OpLoad %5 %52
%56 = OpUGreaterThan %55 %54 %57
OpSelectionMerge %393 None
OpBranchConditional %56 %392 %393
%392 = OpLabel
%61 = OpAccessChain %60 %8 %62
%63 = OpLoad %5 %61
%64 = OpFunctionCall %5 %112 %63 %102 %83
%59 = OpAccessChain %58 %47 %64
%154 = OpAccessChain %153 %59 %53 %53
%155 = OpLoad %41 %154
%156 = OpCompositeExtract %9 %155 0
OpBranch %393
%393 = OpLabel
%157 = OpPhi %9 %158 %391 %156 %392
%159 = OpUGreaterThan %55 %54 %88
OpSelectionMerge %395 None
OpBranchConditional %159 %394 %395
%394 = OpLabel
%160 = OpIAdd %5 %54 %83
%162 = OpAccessChain %60 %8 %62
%163 = OpLoad %5 %162
%164 = OpIAdd %5 %163 %160
%165 = OpFunctionCall %5 %112 %164 %102 %57
%161 = OpAccessChain %58 %47 %165
%166 = OpAccessChain %153 %161 %53 %53
%167 = OpLoad %41 %166
%168 = OpCompositeExtract %9 %167 0
%169 = OpFAdd %9 %168 %157
OpBranch %395
%395 = OpLabel
%170 = OpPhi %9 %157 %393 %169 %394
%171 = OpUGreaterThan %55 %54 %81
OpSelectionMerge %397 None
OpBranchConditional %171 %396 %397
%396 = OpLabel
%174 = OpAccessChain %60 %8 %53
%175 = OpLoad %5 %174
%176 = OpFunctionCall %5 %112 %175 %83 %88
%173 = OpAccessChain %172 %13 %176
%177 = OpLoad %10 %173
%179 = OpCompositeConstruct %29 %54 %53
%178 = OpImageFetch %41 %177 %179 Lod %53
%180 = OpCompositeExtract %9 %178 0
%181 = OpFAdd %9 %180 %170
OpBranch %397
%397 = OpLabel
%182 = OpPhi %9 %170 %395 %181 %396
%183 = OpUGreaterThan %55 %54 %62
OpSelectionMerge %399 None
OpBranchConditional %183 %398 %399
%398 = OpLabel
%184 = OpBitwiseAnd %5 %54 %83
%185 = OpIAdd %5 %184 %83
%187 = OpAccessChain %60 %8 %53
%188 = OpLoad %5 %187
%189 = OpIAdd %5 %188 %185
%190 = OpFunctionCall %5 %112 %189 %83 %81
%186 = OpAccessChain %172 %13 %190
%191 = OpLoad %10 %186
%193 = OpCompositeConstruct %29 %53 %54
%192 = OpImageFetch %41 %191 %193 Lod %53
%194 = OpCompositeExtract %9 %192 0
%195 = OpFAdd %9 %194 %182
OpBranch %399
%399 = OpLabel
%196 = OpPhi %9 %182 %397 %195 %398
%197 = OpUGreaterThan %55 %54 %92
OpSelectionMerge %401 None
OpBranchConditional %197 %400 %401
%400 = OpLabel
%200 = OpAccessChain %60 %8 %83
%201 = OpLoad %5 %200
%202 = OpIAdd %5 %201 %88
%203 = OpFunctionCall %5 %112 %202 %204 %62
%199 = OpAccessChain %198 %17 %203
%205 = OpLoad %14 %199
%206 = OpImageFetch %41 %205 %54
%207 = OpCompositeExtract %9 %206 0
%208 = OpFAdd %9 %207 %196
OpBranch %401
%401 = OpLabel
%209 = OpPhi %9 %196 %399 %208 %400
%210 = OpUGreaterThan %55 %54 %94
OpSelectionMerge %403 None
OpBranchConditional %210 %402 %403
%402 = OpLabel
%211 = OpBitwiseAnd %5 %54 %83
%212 = OpIAdd %5 %211 %81
%214 = OpAccessChain %60 %8 %83
%215 = OpLoad %5 %214
%216 = OpIAdd %5 %215 %212
%217 = OpFunctionCall %5 %112 %216 %204 %92
%213 = OpAccessChain %198 %17 %217
%218 = OpLoad %14 %213
%219 = OpImageFetch %41 %218 %54
%220 = OpCompositeExtract %9 %219 0
%221 = OpFAdd %9 %220 %209
OpBranch %403
%403 = OpLabel
%222 = OpPhi %9 %209 %401 %221 %402
%223 = OpUGreaterThan %55 %54 %102
OpSelectionMerge %405 None
OpBranchConditional %223 %404 %405
%404 = OpLabel
%226 = OpAccessChain %60 %8 %83
%227 = OpLoad %5 %226
%228 = OpIAdd %5 %227 %92
%229 = OpFunctionCall %5 %112 %228 %204 %94
%225 = OpAccessChain %224 %21 %229
%230 = OpLoad %18 %225
%232 = OpImageFetch %231 %230 %54
%233 = OpCompositeExtract %5 %232 0
%234 = OpBitcast %9 %233
%235 = OpFAdd %9 %234 %222
OpBranch %405
%405 = OpLabel
%236 = OpPhi %9 %222 %403 %235 %404
%237 = OpUGreaterThan %55 %54 %119
OpSelectionMerge %407 None
OpBranchConditional %237 %406 %407
%406 = OpLabel
%238 = OpBitwiseAnd %5 %54 %83
%239 = OpIAdd %5 %238 %94
%241 = OpAccessChain %60 %8 %83
%242 = OpLoad %5 %241
%243 = OpIAdd %5 %242 %239
%244 = OpFunctionCall %5 %112 %243 %204 %102
%240 = OpAccessChain %224 %21 %244
%245 = OpLoad %18 %240
%246 = OpImageFetch %231 %245 %54
%247 = OpCompositeExtract %5 %246 0
%248 = OpBitcast %9 %247
%249 = OpFAdd %9 %248 %236
OpBranch %407
%407 = OpLabel
%250 = OpPhi %9 %236 %405 %249 %406
%251 = OpUGreaterThan %55 %54 %131
OpSelectionMerge %409 None
OpBranchConditional %251 %408 %409
%408 = OpLabel
%253 = OpAccessChain %60 %8 %83
%254 = OpLoad %5 %253
%255 = OpIAdd %5 %254 %119
%256 = OpFunctionCall %5 %112 %255 %204 %119
%252 = OpAccessChain %224 %24 %256
%257 = OpLoad %18 %252
%258 = OpShiftLeftLogical %5 %54 %57
%259 = OpImageFetch %231 %257 %54
%260 = OpCompositeExtract %5 %259 0
%261 = OpBitcast %9 %260
%262 = OpFAdd %9 %261 %250
OpBranch %409
%409 = OpLabel
%263 = OpPhi %9 %250 %407 %262 %408
%264 = OpUGreaterThan %55 %54 %265
OpSelectionMerge %411 None
OpBranchConditional %264 %410 %411
%410 = OpLabel
%266 = OpBitwiseAnd %5 %54 %83
%267 = OpIAdd %5 %266 %131
%269 = OpAccessChain %60 %8 %83
%270 = OpLoad %5 %269
%271 = OpIAdd %5 %270 %267
%272 = OpFunctionCall %5 %112 %271 %204 %131
%268 = OpAccessChain %224 %24 %272
%273 = OpLoad %18 %268
%274 = OpShiftRightLogical %5 %54 %57
%275 = OpImageFetch %231 %273 %274
%276 = OpCompositeExtract %5 %275 0
%277 = OpBitcast %9 %276
%278 = OpFAdd %9 %277 %263
OpBranch %411
%411 = OpLabel
%279 = OpPhi %9 %263 %409 %278 %410
%280 = OpUGreaterThan %55 %54 %83
OpSelectionMerge %413 None
OpBranchConditional %280 %412 %413
%412 = OpLabel
%283 = OpAccessChain %60 %8 %81
%284 = OpLoad %5 %283
%285 = OpFunctionCall %5 %112 %284 %286 %265
%282 = OpAccessChain %281 %28 %285
%287 = OpLoad %25 %282
%289 = OpAccessChain %60 %8 %81
%290 = OpLoad %5 %289
%291 = OpFunctionCall %5 %112 %290 %292 %293
%288 = OpAccessChain %98 %33 %53 %291
%294 = OpLoad %29 %288
%295 = OpBitcast %5 %279
%296 = OpCompositeConstruct %231 %295 %295 %295 %295
OpImageWrite %287 %54 %296
OpBranch %413
%413 = OpLabel
%297 = OpUGreaterThan %55 %54 %298
OpSelectionMerge %415 None
OpBranchConditional %297 %414 %415
%414 = OpLabel
%299 = OpBitwiseAnd %5 %54 %83
%300 = OpIAdd %5 %299 %83
%302 = OpAccessChain %60 %8 %81
%303 = OpLoad %5 %302
%304 = OpIAdd %5 %303 %300
%305 = OpFunctionCall %5 %112 %304 %286 %306
%301 = OpAccessChain %281 %28 %305
%307 = OpLoad %25 %301
%308 = OpBitcast %5 %279
%309 = OpCompositeConstruct %231 %308 %308 %308 %308
OpImageWrite %307 %54 %309
OpBranch %415
%415 = OpLabel
%310 = OpUGreaterThan %55 %54 %311
OpSelectionMerge %417 None
OpBranchConditional %310 %416 %417
%416 = OpLabel
%313 = OpAccessChain %60 %8 %81
%314 = OpLoad %5 %313
%315 = OpIAdd %5 %314 %88
%316 = OpFunctionCall %5 %112 %315 %286 %317
%312 = OpAccessChain %281 %36 %316
%318 = OpLoad %25 %312
%319 = OpBitcast %5 %279
%320 = OpShiftLeftLogical %5 %54 %57
%321 = OpCompositeConstruct %231 %319 %319 %319 %319
OpImageWrite %318 %54 %321
OpBranch %417
%417 = OpLabel
%322 = OpUGreaterThan %55 %54 %323
OpSelectionMerge %419 None
OpBranchConditional %322 %418 %419
%418 = OpLabel
%324 = OpBitwiseAnd %5 %54 %83
%325 = OpBitcast %5 %279
%326 = OpShiftLeftLogical %5 %54 %57
%327 = OpIAdd %5 %324 %81
%329 = OpAccessChain %60 %8 %81
%330 = OpLoad %5 %329
%331 = OpIAdd %5 %330 %327
%332 = OpFunctionCall %5 %112 %331 %286 %333
%328 = OpAccessChain %281 %36 %332
%334 = OpLoad %25 %328
%335 = OpCompositeConstruct %231 %325 %325 %325 %325
OpImageWrite %334 %54 %335
OpBranch %419
%419 = OpLabel
%336 = OpUGreaterThan %55 %54 %337
OpSelectionMerge %421 None
OpBranchConditional %336 %420 %421
%420 = OpLabel
%340 = OpAccessChain %60 %8 %88
%341 = OpLoad %5 %340
%342 = OpIAdd %5 %341 %92
%343 = OpFunctionCall %5 %112 %342 %57 %204
%339 = OpAccessChain %338 %40 %343
%344 = OpLoad %37 %339
%345 = OpCompositeConstruct %29 %54 %53
%346 = OpCompositeConstruct %41 %279 %279 %279 %279
OpImageWrite %344 %345 %346
OpBranch %421
%421 = OpLabel
%347 = OpUGreaterThan %55 %54 %348
OpSelectionMerge %423 None
OpBranchConditional %347 %422 %423
%422 = OpLabel
%349 = OpBitwiseAnd %5 %54 %83
%350 = OpIAdd %5 %349 %94
%352 = OpAccessChain %60 %8 %88
%353 = OpLoad %5 %352
%354 = OpIAdd %5 %353 %350
%355 = OpFunctionCall %5 %112 %354 %57 %356
%351 = OpAccessChain %338 %40 %355
%357 = OpLoad %37 %351
%358 = OpCompositeConstruct %29 %53 %54
%359 = OpCompositeConstruct %41 %279 %279 %279 %279
OpImageWrite %357 %358 %359
OpBranch %423
%423 = OpLabel
%361 = OpAccessChain %60 %8 %81
%362 = OpLoad %5 %361
%363 = OpFunctionCall %5 %112 %362 %286 %364
%360 = OpAccessChain %281 %28 %363
%365 = OpLoad %25 %360
%367 = OpAccessChain %60 %8 %81
%368 = OpLoad %5 %367
%369 = OpFunctionCall %5 %112 %368 %292 %370
%366 = OpAccessChain %98 %33 %53 %369
%371 = OpLoad %29 %366
%390 = OpFunctionCall %5 %376 %371 %83 %53
OpReturn
OpFunctionEnd
%77 = OpFunction %1 None %69
%70 = OpFunctionParameter %5
%71 = OpFunctionParameter %5
%72 = OpFunctionParameter %5
%73 = OpFunctionParameter %5
%74 = OpFunctionParameter %5
%75 = OpFunctionParameter %5
%76 = OpFunctionParameter %5
%78 = OpLabel
%80 = OpAccessChain %79 %68 %81
%82 = OpAtomicIAdd %5 %80 %83 %53 %83
%84 = OpIEqual %55 %82 %53
OpSelectionMerge %86 None
OpBranchConditional %84 %85 %86
%85 = OpLabel
%87 = OpAccessChain %79 %68 %88
OpStore %87 %72
%89 = OpAccessChain %79 %68 %83
OpStore %89 %71
%90 = OpAccessChain %79 %68 %57
OpStore %90 %73
%91 = OpAccessChain %79 %68 %92
OpStore %91 %74
%93 = OpAccessChain %79 %68 %94
OpStore %93 %75
%95 = OpAccessChain %79 %68 %62
OpStore %95 %76
%99 = OpAccessChain %98 %68 %53
OpStore %99 %97
OpMemoryBarrier %83 %100
%101 = OpAccessChain %79 %68 %102
OpStore %101 %70
OpBranch %86
%86 = OpLabel
OpReturn
OpFunctionEnd
%112 = OpFunction %5 None %108
%109 = OpFunctionParameter %5
%110 = OpFunctionParameter %5
%111 = OpFunctionParameter %5
%113 = OpLabel
%114 = OpAccessChain %79 %107 %53
%115 = OpLoad %5 %114
%116 = OpAccessChain %79 %107 %83
%117 = OpLoad %5 %116
%118 = OpAccessChain %79 %68 %119
%120 = OpLoad %5 %118
%122 = OpAccessChain %121 %107 %57 %109
%123 = OpLoad %48 %122
%124 = OpCompositeExtract %5 %123 0
%125 = OpCompositeExtract %5 %123 1
%126 = OpCompositeExtract %5 %123 2
%127 = OpShiftRightLogical %5 %124 %62
%128 = OpBitwiseAnd %5 %124 %129
%130 = OpAccessChain %79 %68 %131 %127
%132 = OpLoad %5 %130
%133 = OpShiftLeftLogical %5 %83 %128
%134 = OpBitwiseAnd %5 %132 %133
%135 = OpINotEqual %55 %134 %53
%136 = OpBitwiseAnd %5 %126 %110
%137 = OpIEqual %55 %136 %110
%138 = OpUGreaterThanEqual %55 %109 %115
%139 = OpSelect %5 %138 %83 %53
%140 = OpSelect %5 %137 %53 %57
%141 = OpSelect %5 %135 %53 %81
%142 = OpUGreaterThanEqual %55 %120 %125
%143 = OpSelect %5 %142 %53 %102
%144 = OpBitwiseOr %5 %139 %140
%145 = OpBitwiseOr %5 %144 %141
%146 = OpBitwiseOr %5 %145 %143
%147 = OpINotEqual %55 %146 %53
OpSelectionMerge %149 None
OpBranchConditional %147 %148 %149
%148 = OpLabel
%150 = OpFunctionCall %1 %77 %146 %109 %124 %117 %110 %126 %111
OpReturnValue %115
%149 = OpLabel
OpReturnValue %109
OpFunctionEnd
%376 = OpFunction %5 None %372
%373 = OpFunctionParameter %29
%374 = OpFunctionParameter %5
%375 = OpFunctionParameter %5
%377 = OpLabel
%382 = OpINotEqual %380 %373 %381
%383 = OpAny %55 %382
OpSelectionMerge %379 None
OpBranchConditional %383 %378 %379
%378 = OpLabel
%385 = OpBitcast %384 %373
%386 = OpAtomicIAdd %5 %385 %83 %53 %374
%387 = OpIAdd %5 %386 %375
OpBranch %379
%379 = OpLabel
%388 = OpPhi %5 %53 %377 %387 %378
OpReturnValue %388
OpFunctionEnd
#endif
