#version 460
#extension GL_EXT_ray_tracing : require
#extension GL_EXT_buffer_reference2 : require
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_ballot : require

struct _23
{
    vec4 _m0;
};

layout(shaderRecordEXT, std430) buffer SBTBlock
{
    uint _m0[5];
    uint _m1[6];
    uvec2 _m2;
    uvec2 _m3;
    uvec2 _m4;
    uvec2 _m5;
    uvec2 _m6;
    uvec2 _m7;
    uvec2 _m8;
    uvec2 _m9;
    uvec2 _m10;
} SBT;

layout(set = 0, binding = 0, std430) restrict readonly buffer RTASHeap
{
    uvec2 _m0[];
} _20;

layout(set = 10, binding = 10, std430) buffer DescriptorHeapGlobalQAData
{
    uvec2 failed_shader_hash;
    uint failed_offset;
    uint failed_heap;
    uint failed_cookie;
    uint fault_atomic;
    uint failed_instruction;
    uint failed_descriptor_type_mask;
    uint actual_descriptor_type_mask;
    uint fault_type;
    uint live_status_table[];
} QAGlobalData;

layout(set = 10, binding = 11, std430) readonly buffer DescriptorHeapQAData
{
    uint descriptor_count;
    uint heap_index;
    uvec2 cookies_descriptor_info[];
} QAHeapData;

layout(push_constant, std430) uniform RootConstants
{
    uint _m0;
    uint _m1;
    uint _m2;
    uint _m3;
    uint _m4;
    uint _m5;
    uint _m6;
    uint _m7;
} registers;

layout(location = 0) rayPayloadEXT _23 _25;
layout(location = 1) rayPayloadEXT _23 _26;
layout(location = 2) rayPayloadEXT _23 _27;
layout(location = 3) rayPayloadEXT _23 _28;

void descriptor_qa_report_fault(uint fault_type, uint heap_offset, uint cookie, uint heap_index, uint descriptor_type, uint actual_descriptor_type, uint instruction)
{
    uint _55 = atomicAdd(QAGlobalData.fault_atomic, 1u);
    if (_55 == 0u)
    {
        QAGlobalData.failed_cookie = cookie;
        QAGlobalData.failed_offset = heap_offset;
        QAGlobalData.failed_heap = heap_index;
        QAGlobalData.failed_descriptor_type_mask = descriptor_type;
        QAGlobalData.actual_descriptor_type_mask = actual_descriptor_type;
        QAGlobalData.failed_instruction = instruction;
        QAGlobalData.failed_shader_hash = uvec2(3735928559u, 0u);
        memoryBarrierBuffer();
        QAGlobalData.fault_type = fault_type;
    }
}

uint descriptor_qa_check(uint heap_offset, uint descriptor_type_mask, uint instruction)
{
    uint _89 = QAHeapData.descriptor_count;
    uint _91 = QAHeapData.heap_index;
    uvec2 _93 = QAHeapData.cookies_descriptor_info[heap_offset];
    uint _101 = QAGlobalData.live_status_table[_93.x >> 5u];
    uint _112 = (uint(heap_offset >= _89) | (((_93.y & descriptor_type_mask) == descriptor_type_mask) ? 0u : 2u)) | (((_101 & (1u << (_93.x & 31u))) != 0u) ? 0u : 4u);
    if (_112 != 0u)
    {
        descriptor_qa_report_fault(_112, heap_offset, _93.x, _91, descriptor_type_mask, _93.y, instruction);
        return _89;
    }
    return heap_offset;
}

void main()
{
    uint _37 = descriptor_qa_check((registers._m0 + 100u) + 10u, 320u, 1u);
    _28._m0 = vec4(1.0, 2.0, 3.0, 4.0);
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_37)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 3);
    uint _140 = descriptor_qa_check(registers._m0 + 3u, 320u, 2u);
    _27._m0 = _28._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_140)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 2);
    uint _155 = descriptor_qa_check((registers._m0 + 100u) + uint(int(_27._m0.w)), 320u, 3u);
    _26._m0 = _27._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[_155]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 1);
    uint _170 = descriptor_qa_check(((SBT._m7.x >> 6u) + 10u) + 200u, 320u, 4u);
    _25._m0 = _26._m0;
    traceRayEXT(accelerationStructureEXT(_20._m0[subgroupBroadcastFirst(_170)]), 0u, 0u, 0u, 0u, 0u, vec3(1.0, 2.0, 3.0), 1.0, vec3(0.0, 0.0, 1.0), 4.0, 0);
}


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.4
; Generator: Unknown(30017); 21022
; Bound: 180
; Schema: 0
OpCapability Shader
OpCapability UniformBufferArrayDynamicIndexing
OpCapability SampledImageArrayDynamicIndexing
OpCapability StorageBufferArrayDynamicIndexing
OpCapability StorageImageArrayDynamicIndexing
OpCapability GroupNonUniformBallot
OpCapability RayTracingKHR
OpCapability RuntimeDescriptorArray
OpCapability UniformBufferArrayNonUniformIndexing
OpCapability SampledImageArrayNonUniformIndexing
OpCapability StorageBufferArrayNonUniformIndexing
OpCapability StorageImageArrayNonUniformIndexing
OpCapability PhysicalStorageBufferAddresses
OpExtension "SPV_EXT_descriptor_indexing"
OpExtension "SPV_KHR_physical_storage_buffer"
OpExtension "SPV_KHR_ray_tracing"
OpMemoryModel PhysicalStorageBuffer64 GLSL450
OpEntryPoint RayGenerationKHR %3 "main" %8 %16 %20 %25 %26 %27 %28 %41 %81
OpName %3 "main"
OpName %6 "RootConstants"
OpName %8 "registers"
OpName %14 "SBTBlock"
OpName %16 "SBT"
OpName %18 "RTASHeap"
OpName %23 ""
OpName %39 "DescriptorHeapGlobalQAData"
OpMemberName %39 0 "failed_shader_hash"
OpMemberName %39 1 "failed_offset"
OpMemberName %39 2 "failed_heap"
OpMemberName %39 3 "failed_cookie"
OpMemberName %39 4 "fault_atomic"
OpMemberName %39 5 "failed_instruction"
OpMemberName %39 6 "failed_descriptor_type_mask"
OpMemberName %39 7 "actual_descriptor_type_mask"
OpMemberName %39 8 "fault_type"
OpMemberName %39 9 "live_status_table"
OpName %41 "QAGlobalData"
OpName %50 "descriptor_qa_report_fault"
OpName %43 "fault_type"
OpName %44 "heap_offset"
OpName %45 "cookie"
OpName %46 "heap_index"
OpName %47 "descriptor_type"
OpName %48 "actual_descriptor_type"
OpName %49 "instruction"
OpName %79 "DescriptorHeapQAData"
OpMemberName %79 0 "descriptor_count"
OpMemberName %79 1 "heap_index"
OpMemberName %79 2 "cookies_descriptor_info"
OpName %81 "QAHeapData"
OpName %86 "descriptor_qa_check"
OpName %83 "heap_offset"
OpName %84 "descriptor_type_mask"
OpName %85 "instruction"
OpDecorate %6 Block
OpMemberDecorate %6 0 Offset 0
OpMemberDecorate %6 1 Offset 4
OpMemberDecorate %6 2 Offset 8
OpMemberDecorate %6 3 Offset 12
OpMemberDecorate %6 4 Offset 16
OpMemberDecorate %6 5 Offset 20
OpMemberDecorate %6 6 Offset 24
OpMemberDecorate %6 7 Offset 28
OpDecorate %10 ArrayStride 4
OpDecorate %12 ArrayStride 4
OpDecorate %14 Block
OpMemberDecorate %14 0 Offset 0
OpMemberDecorate %14 1 Offset 20
OpMemberDecorate %14 2 Offset 48
OpMemberDecorate %14 3 Offset 56
OpMemberDecorate %14 4 Offset 64
OpMemberDecorate %14 5 Offset 72
OpMemberDecorate %14 6 Offset 80
OpMemberDecorate %14 7 Offset 88
OpMemberDecorate %14 8 Offset 96
OpMemberDecorate %14 9 Offset 104
OpMemberDecorate %14 10 Offset 112
OpDecorate %17 ArrayStride 8
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpDecorate %20 DescriptorSet 0
OpDecorate %20 Binding 0
OpDecorate %20 NonWritable
OpDecorate %20 Restrict
OpDecorate %38 ArrayStride 4
OpMemberDecorate %39 0 Offset 0
OpMemberDecorate %39 1 Offset 8
OpMemberDecorate %39 2 Offset 12
OpMemberDecorate %39 3 Offset 16
OpMemberDecorate %39 4 Offset 20
OpMemberDecorate %39 5 Offset 24
OpMemberDecorate %39 6 Offset 28
OpMemberDecorate %39 7 Offset 32
OpMemberDecorate %39 8 Offset 36
OpMemberDecorate %39 9 Offset 40
OpDecorate %39 Block
OpDecorate %41 DescriptorSet 10
OpDecorate %41 Binding 10
OpDecorate %78 ArrayStride 8
OpMemberDecorate %79 0 Offset 0
OpMemberDecorate %79 1 Offset 4
OpMemberDecorate %79 2 Offset 8
OpDecorate %79 Block
OpDecorate %81 DescriptorSet 10
OpDecorate %81 Binding 11
OpDecorate %81 NonWritable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeStruct %5 %5 %5 %5 %5 %5 %5 %5
%7 = OpTypePointer PushConstant %6
%8 = OpVariable %7 PushConstant
%9 = OpConstant %5 5
%10 = OpTypeArray %5 %9
%11 = OpConstant %5 6
%12 = OpTypeArray %5 %11
%13 = OpTypeVector %5 2
%14 = OpTypeStruct %10 %12 %13 %13 %13 %13 %13 %13 %13 %13 %13
%15 = OpTypePointer ShaderRecordBufferKHR %14
%16 = OpVariable %15 ShaderRecordBufferKHR
%17 = OpTypeRuntimeArray %13
%18 = OpTypeStruct %17
%19 = OpTypePointer StorageBuffer %18
%20 = OpVariable %19 StorageBuffer
%21 = OpTypeFloat 32
%22 = OpTypeVector %21 4
%23 = OpTypeStruct %22
%24 = OpTypePointer RayPayloadKHR %23
%25 = OpVariable %24 RayPayloadKHR
%26 = OpVariable %24 RayPayloadKHR
%27 = OpVariable %24 RayPayloadKHR
%28 = OpVariable %24 RayPayloadKHR
%29 = OpTypePointer PushConstant %5
%31 = OpConstant %5 0
%34 = OpConstant %5 100
%36 = OpConstant %5 10
%38 = OpTypeRuntimeArray %5
%39 = OpTypeStruct %13 %5 %5 %5 %5 %5 %5 %5 %5 %38
%40 = OpTypePointer StorageBuffer %39
%41 = OpVariable %40 StorageBuffer
%42 = OpTypeFunction %1 %5 %5 %5 %5 %5 %5 %5
%52 = OpTypePointer StorageBuffer %5
%54 = OpConstant %5 4
%56 = OpConstant %5 1
%57 = OpTypeBool
%62 = OpConstant %5 3
%65 = OpConstant %5 2
%68 = OpConstant %5 7
%70 = OpConstant %5 3735928559
%71 = OpConstantComposite %13 %70 %31
%72 = OpTypePointer StorageBuffer %13
%74 = OpConstant %5 72
%76 = OpConstant %5 8
%78 = OpTypeRuntimeArray %13
%79 = OpTypeStruct %5 %5 %78
%80 = OpTypePointer StorageBuffer %79
%81 = OpVariable %80 StorageBuffer
%82 = OpTypeFunction %5 %5 %5 %5
%98 = OpConstant %5 31
%100 = OpConstant %5 9
%119 = OpConstant %5 320
%123 = OpTypeAccelerationStructureKHR
%125 = OpTypePointer RayPayloadKHR %22
%127 = OpConstant %21 1
%128 = OpConstant %21 2
%129 = OpConstant %21 3
%130 = OpConstant %21 4
%131 = OpConstantComposite %22 %127 %128 %129 %130
%132 = OpConstant %21 0
%133 = OpTypeVector %21 3
%163 = OpTypePointer ShaderRecordBufferKHR %5
%169 = OpConstant %5 200
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %178
%178 = OpLabel
%30 = OpAccessChain %29 %8 %31
%32 = OpLoad %5 %30
%33 = OpIAdd %5 %32 %34
%35 = OpIAdd %5 %33 %36
%37 = OpFunctionCall %5 %86 %35 %119 %56
%120 = OpGroupNonUniformBroadcastFirst %5 %62 %37
%121 = OpAccessChain %72 %20 %31 %120
%122 = OpLoad %13 %121
%124 = OpConvertUToAccelerationStructureKHR %123 %122
%126 = OpInBoundsAccessChain %125 %28 %31
OpStore %126 %131
%134 = OpCompositeConstruct %133 %127 %128 %129
%135 = OpCompositeConstruct %133 %132 %132 %127
OpTraceRayKHR %124 %31 %31 %31 %31 %31 %134 %127 %135 %130 %28
%136 = OpLoad %22 %126
%137 = OpAccessChain %29 %8 %31
%138 = OpLoad %5 %137
%139 = OpIAdd %5 %138 %62
%140 = OpFunctionCall %5 %86 %139 %119 %65
%141 = OpGroupNonUniformBroadcastFirst %5 %62 %140
%142 = OpAccessChain %72 %20 %31 %141
%143 = OpLoad %13 %142
%144 = OpConvertUToAccelerationStructureKHR %123 %143
%145 = OpInBoundsAccessChain %125 %27 %31
OpStore %145 %136
%146 = OpCompositeConstruct %133 %127 %128 %129
%147 = OpCompositeConstruct %133 %132 %132 %127
OpTraceRayKHR %144 %31 %31 %31 %31 %31 %146 %127 %147 %130 %27
%148 = OpLoad %22 %145
%149 = OpCompositeExtract %21 %148 3
%150 = OpConvertFToS %5 %149
%151 = OpAccessChain %29 %8 %31
%152 = OpLoad %5 %151
%153 = OpIAdd %5 %152 %34
%154 = OpIAdd %5 %153 %150
%155 = OpFunctionCall %5 %86 %154 %119 %62
%156 = OpAccessChain %72 %20 %31 %155
%157 = OpLoad %13 %156
%158 = OpConvertUToAccelerationStructureKHR %123 %157
%159 = OpInBoundsAccessChain %125 %26 %31
OpStore %159 %148
%160 = OpCompositeConstruct %133 %127 %128 %129
%161 = OpCompositeConstruct %133 %132 %132 %127
OpTraceRayKHR %158 %31 %31 %31 %31 %31 %160 %127 %161 %130 %26
%162 = OpLoad %22 %159
%164 = OpAccessChain %163 %16 %68 %31
%165 = OpLoad %5 %164
%166 = OpShiftRightLogical %5 %165 %11
%167 = OpIAdd %5 %166 %36
%168 = OpIAdd %5 %167 %169
%170 = OpFunctionCall %5 %86 %168 %119 %54
%171 = OpGroupNonUniformBroadcastFirst %5 %62 %170
%172 = OpAccessChain %72 %20 %31 %171
%173 = OpLoad %13 %172
%174 = OpConvertUToAccelerationStructureKHR %123 %173
%175 = OpInBoundsAccessChain %125 %25 %31
OpStore %175 %162
%176 = OpCompositeConstruct %133 %127 %128 %129
%177 = OpCompositeConstruct %133 %132 %132 %127
OpTraceRayKHR %174 %31 %31 %31 %31 %31 %176 %127 %177 %130 %25
OpReturn
OpFunctionEnd
%50 = OpFunction %1 None %42
%43 = OpFunctionParameter %5
%44 = OpFunctionParameter %5
%45 = OpFunctionParameter %5
%46 = OpFunctionParameter %5
%47 = OpFunctionParameter %5
%48 = OpFunctionParameter %5
%49 = OpFunctionParameter %5
%51 = OpLabel
%53 = OpAccessChain %52 %41 %54
%55 = OpAtomicIAdd %5 %53 %56 %31 %56
%58 = OpIEqual %57 %55 %31
OpSelectionMerge %60 None
OpBranchConditional %58 %59 %60
%59 = OpLabel
%61 = OpAccessChain %52 %41 %62
OpStore %61 %45
%63 = OpAccessChain %52 %41 %56
OpStore %63 %44
%64 = OpAccessChain %52 %41 %65
OpStore %64 %46
%66 = OpAccessChain %52 %41 %11
OpStore %66 %47
%67 = OpAccessChain %52 %41 %68
OpStore %67 %48
%69 = OpAccessChain %52 %41 %9
OpStore %69 %49
%73 = OpAccessChain %72 %41 %31
OpStore %73 %71
OpMemoryBarrier %56 %74
%75 = OpAccessChain %52 %41 %76
OpStore %75 %43
OpBranch %60
%60 = OpLabel
OpReturn
OpFunctionEnd
%86 = OpFunction %5 None %82
%83 = OpFunctionParameter %5
%84 = OpFunctionParameter %5
%85 = OpFunctionParameter %5
%87 = OpLabel
%88 = OpAccessChain %52 %81 %31
%89 = OpLoad %5 %88
%90 = OpAccessChain %52 %81 %56
%91 = OpLoad %5 %90
%92 = OpAccessChain %72 %81 %65 %83
%93 = OpLoad %13 %92
%94 = OpCompositeExtract %5 %93 0
%96 = OpShiftRightLogical %5 %94 %9
%97 = OpBitwiseAnd %5 %94 %98
%95 = OpCompositeExtract %5 %93 1
%99 = OpAccessChain %52 %41 %100 %96
%101 = OpLoad %5 %99
%102 = OpShiftLeftLogical %5 %56 %97
%103 = OpBitwiseAnd %5 %101 %102
%104 = OpINotEqual %57 %103 %31
%105 = OpBitwiseAnd %5 %95 %84
%106 = OpIEqual %57 %105 %84
%107 = OpUGreaterThanEqual %57 %83 %89
%108 = OpSelect %5 %107 %56 %31
%109 = OpSelect %5 %106 %31 %65
%110 = OpSelect %5 %104 %31 %54
%111 = OpBitwiseOr %5 %108 %109
%112 = OpBitwiseOr %5 %111 %110
%113 = OpINotEqual %57 %112 %31
OpSelectionMerge %115 None
OpBranchConditional %113 %114 %115
%114 = OpLabel
%116 = OpFunctionCall %1 %50 %112 %83 %94 %91 %84 %95 %85
OpReturnValue %89
%115 = OpLabel
OpReturnValue %83
OpFunctionEnd
#endif
