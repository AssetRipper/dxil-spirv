#version 460
#extension GL_KHR_shader_subgroup_quad : require
#extension GL_KHR_shader_subgroup_basic : require
#extension GL_KHR_shader_subgroup_shuffle : require
layout(local_size_x = 16, local_size_y = 2, local_size_z = 2) in;

layout(set = 0, binding = 0, r32ui) uniform readonly uimageBuffer _8;
layout(set = 0, binding = 1, r32ui) uniform writeonly uimageBuffer _9;

void main()
{
    uint _39 = (gl_WorkGroupID.x << 6u) + ((((bitfieldExtract(gl_LocalInvocationID.x, int(1u), int(1u)) + (gl_LocalInvocationID.y * 2u)) * 8u) + (gl_LocalInvocationID.z * 32u)) + ((gl_LocalInvocationID.x & 1u) | ((gl_LocalInvocationID.x >> 2u) << 1u)));
    uvec4 _43 = imageLoad(_8, int(_39));
    uint _44 = _43.x;
    uint _56 = _39 * 2u;
    imageStore(_9, int(_56), uvec4(subgroupQuadBroadcast(_44, 1u)));
    imageStore(_9, int(_56 + 1u), uvec4(subgroupShuffle(_44, (gl_SubgroupInvocationID & 4294967292u) + (_44 & 3u))));
}


#if 0
// SPIR-V disassembly
// HeuristicWaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 62
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpCapability GroupNonUniform
OpCapability GroupNonUniformShuffle
OpCapability GroupNonUniformQuad
OpCapability ComputeDerivativeGroupLinearKHR
OpExtension "SPV_NV_compute_shader_derivatives"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %12 %32 %48
OpExecutionMode %3 DerivativeGroupLinearKHR
OpExecutionMode %3 LocalSize 16 2 2
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonWritable
OpDecorate %9 DescriptorSet 0
OpDecorate %9 Binding 1
OpDecorate %9 NonReadable
OpDecorate %12 BuiltIn LocalInvocationId
OpDecorate %32 BuiltIn WorkgroupId
OpDecorate %48 BuiltIn SubgroupLocalInvocationId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpVariable %7 UniformConstant
%10 = OpTypeVector %5 3
%11 = OpTypePointer Input %10
%12 = OpVariable %11 Input
%18 = OpConstant %5 1
%20 = OpConstant %5 2
%27 = OpConstant %5 8
%29 = OpConstant %5 32
%32 = OpVariable %11 Input
%33 = OpTypePointer Input %5
%35 = OpConstant %5 0
%38 = OpConstant %5 6
%42 = OpTypeVector %5 4
%46 = OpConstant %5 3
%48 = OpVariable %33 Input
%51 = OpConstant %5 4294967292
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %60
%60 = OpLabel
%13 = OpLoad %10 %12
%14 = OpCompositeExtract %5 %13 0
%15 = OpCompositeExtract %5 %13 1
%16 = OpCompositeExtract %5 %13 2
%17 = OpBitFieldUExtract %5 %14 %18 %18
%19 = OpIMul %5 %15 %20
%21 = OpIAdd %5 %17 %19
%22 = OpBitwiseAnd %5 %14 %18
%23 = OpShiftRightLogical %5 %14 %20
%24 = OpShiftLeftLogical %5 %23 %18
%25 = OpBitwiseOr %5 %22 %24
%26 = OpIMul %5 %21 %27
%28 = OpIMul %5 %16 %29
%30 = OpIAdd %5 %26 %28
%31 = OpIAdd %5 %30 %25
%34 = OpAccessChain %33 %32 %35
%36 = OpLoad %5 %34
%37 = OpShiftLeftLogical %5 %36 %38
%39 = OpIAdd %5 %37 %31
%40 = OpShiftLeftLogical %5 %39 %20
%41 = OpLoad %6 %8
%43 = OpImageRead %42 %41 %39
%44 = OpCompositeExtract %5 %43 0
%45 = OpGroupNonUniformQuadBroadcast %5 %46 %44 %18
%47 = OpBitwiseAnd %5 %44 %46
%49 = OpLoad %5 %48
%50 = OpBitwiseAnd %5 %49 %51
%52 = OpIAdd %5 %50 %47
%53 = OpGroupNonUniformShuffle %5 %46 %44 %52
%54 = OpShiftLeftLogical %5 %39 %46
%55 = OpLoad %6 %9
%56 = OpIMul %5 %39 %20
%57 = OpCompositeConstruct %42 %45 %45 %45 %45
OpImageWrite %55 %56 %57
%58 = OpCompositeConstruct %42 %53 %53 %53 %53
%59 = OpIAdd %5 %56 %18
OpImageWrite %55 %59 %58
OpReturn
OpFunctionEnd
#endif
