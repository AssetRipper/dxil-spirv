#version 460
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform uimageBuffer _8;

shared uint _10;

void main()
{
    if (gl_LocalInvocationIndex < 16u)
    {
        if (imageLoad(_8, int(gl_LocalInvocationIndex)).x == 50u)
        {
            _10 = 50u;
        }
    }
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    imageStore(_8, int(gl_LocalInvocationIndex), uvec4(_10));
}

/* WARNINGS:
- Has group shared access, but no group shared barrier anywhere.
*/


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 33
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %13
OpExecutionMode %3 LocalSize 32 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %13 BuiltIn LocalInvocationIndex
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpTypePointer Workgroup %5
%10 = OpVariable %9 Workgroup
%12 = OpTypePointer Input %5
%13 = OpVariable %12 Input
%15 = OpTypeBool
%17 = OpConstant %5 16
%18 = OpTypeVector %5 4
%22 = OpConstant %5 50
%30 = OpConstant %5 3
%31 = OpConstant %5 264
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %25
%25 = OpLabel
%11 = OpLoad %6 %8
%14 = OpLoad %5 %13
%16 = OpULessThan %15 %14 %17
OpSelectionMerge %29 None
OpBranchConditional %16 %26 %29
%26 = OpLabel
%19 = OpImageRead %18 %11 %14
%20 = OpCompositeExtract %5 %19 0
%21 = OpIEqual %15 %20 %22
OpSelectionMerge %28 None
OpBranchConditional %21 %27 %28
%27 = OpLabel
OpStore %10 %22
OpBranch %28
%28 = OpLabel
OpBranch %29
%29 = OpLabel
OpControlBarrier %30 %30 %31
%23 = OpLoad %5 %10
%24 = OpCompositeConstruct %18 %23 %23 %23 %23
OpImageWrite %11 %14 %24
OpReturn
OpFunctionEnd
#endif
