#version 460
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared uint _12[32];

void main()
{
    _12[gl_LocalInvocationIndex] = 40u;
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    imageStore(_8, int(gl_LocalInvocationIndex), uvec4(_12[gl_LocalInvocationIndex ^ 31u]));
    imageStore(_8, int(gl_LocalInvocationIndex), uvec4(_12[gl_LocalInvocationIndex ^ 15u]));
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    uint _31 = atomicAdd(_12[gl_LocalInvocationIndex], 1u);
    uint _35 = atomicOr(_12[gl_LocalInvocationIndex], 1u);
    uint _36 = atomicXor(_12[gl_LocalInvocationIndex], 1u);
}

/* WARNINGS:
- Has group shared access, but no group shared barrier anywhere.
*/


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 41
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %15
OpExecutionMode %3 LocalSize 32 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %15 BuiltIn LocalInvocationIndex
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 32
%10 = OpTypeArray %5 %9
%11 = OpTypePointer Workgroup %10
%12 = OpVariable %11 Workgroup
%14 = OpTypePointer Input %5
%15 = OpVariable %14 Input
%17 = OpTypePointer Workgroup %5
%19 = OpConstant %5 40
%21 = OpConstant %5 31
%24 = OpTypeVector %5 4
%27 = OpConstant %5 15
%32 = OpConstant %5 2
%33 = OpConstant %5 0
%34 = OpConstant %5 1
%38 = OpConstant %5 3
%39 = OpConstant %5 264
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %37
%37 = OpLabel
%13 = OpLoad %6 %8
%16 = OpLoad %5 %15
%18 = OpAccessChain %17 %12 %16
OpStore %18 %19
%20 = OpBitwiseXor %5 %16 %21
%22 = OpAccessChain %17 %12 %20
OpControlBarrier %38 %38 %39
%23 = OpLoad %5 %22
%25 = OpCompositeConstruct %24 %23 %23 %23 %23
OpImageWrite %13 %16 %25
%26 = OpBitwiseXor %5 %16 %27
%28 = OpAccessChain %17 %12 %26
%29 = OpLoad %5 %28
%30 = OpCompositeConstruct %24 %29 %29 %29 %29
OpImageWrite %13 %16 %30
OpControlBarrier %38 %38 %39
%31 = OpAtomicIAdd %5 %18 %32 %33 %34
%35 = OpAtomicOr %5 %18 %32 %33 %34
%36 = OpAtomicXor %5 %18 %32 %33 %34
OpReturn
OpFunctionEnd
#endif
