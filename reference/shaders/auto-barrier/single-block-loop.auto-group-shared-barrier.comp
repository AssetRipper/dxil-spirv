#version 460
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, r32ui) uniform writeonly uimageBuffer _8;

shared uint _12[32];

void main()
{
    uint _17;
    _17 = 0u;
    for (;;)
    {
        _12[gl_LocalInvocationIndex] = 40u;
        subgroupMemoryBarrierShared();
        subgroupBarrier();
        imageStore(_8, int(gl_LocalInvocationIndex), uvec4(_12[gl_LocalInvocationIndex ^ 31u]));
        imageStore(_8, int(gl_LocalInvocationIndex), uvec4(_12[gl_LocalInvocationIndex ^ 15u]));
        subgroupMemoryBarrierShared();
        subgroupBarrier();
        uint _34 = atomicAdd(_12[gl_LocalInvocationIndex], 1u);
        uint _37 = atomicOr(_12[gl_LocalInvocationIndex], 1u);
        uint _38 = atomicXor(_12[gl_LocalInvocationIndex], 1u);
        uint _19 = _17 + 1u;
        subgroupMemoryBarrierShared();
        subgroupBarrier();
        if (_19 == 4u)
        {
            break;
        }
        else
        {
            _17 = _19;
        }
    }
}

/* WARNINGS:
- Has group shared access, but no group shared barrier anywhere.
*/


#if 0
// SPIR-V disassembly
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 48
; Schema: 0
OpCapability Shader
OpCapability ImageBuffer
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %15
OpExecutionMode %3 LocalSize 32 1 1
OpName %3 "main"
OpDecorate %8 DescriptorSet 0
OpDecorate %8 Binding 0
OpDecorate %8 NonReadable
OpDecorate %15 BuiltIn LocalInvocationIndex
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 32 0
%6 = OpTypeImage %5 Buffer 0 0 0 2 R32ui
%7 = OpTypePointer UniformConstant %6
%8 = OpVariable %7 UniformConstant
%9 = OpConstant %5 32
%10 = OpTypeArray %5 %9
%11 = OpTypePointer Workgroup %10
%12 = OpVariable %11 Workgroup
%14 = OpTypePointer Input %5
%15 = OpVariable %14 Input
%18 = OpConstant %5 0
%20 = OpTypePointer Workgroup %5
%22 = OpConstant %5 40
%24 = OpConstant %5 31
%27 = OpTypeVector %5 4
%30 = OpConstant %5 15
%35 = OpConstant %5 2
%36 = OpConstant %5 1
%39 = OpTypeBool
%41 = OpConstant %5 4
%45 = OpConstant %5 3
%46 = OpConstant %5 264
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %42
%42 = OpLabel
%13 = OpLoad %6 %8
%16 = OpLoad %5 %15
OpBranch %43
%43 = OpLabel
%17 = OpPhi %5 %18 %42 %19 %43
%21 = OpAccessChain %20 %12 %16
OpStore %21 %22
%23 = OpBitwiseXor %5 %16 %24
%25 = OpAccessChain %20 %12 %23
OpControlBarrier %45 %45 %46
%26 = OpLoad %5 %25
%28 = OpCompositeConstruct %27 %26 %26 %26 %26
OpImageWrite %13 %16 %28
%29 = OpBitwiseXor %5 %16 %30
%31 = OpAccessChain %20 %12 %29
%32 = OpLoad %5 %31
%33 = OpCompositeConstruct %27 %32 %32 %32 %32
OpImageWrite %13 %16 %33
OpControlBarrier %45 %45 %46
%34 = OpAtomicIAdd %5 %21 %35 %18 %36
%37 = OpAtomicOr %5 %21 %35 %18 %36
%38 = OpAtomicXor %5 %21 %35 %18 %36
%19 = OpIAdd %5 %17 %36
%40 = OpIEqual %39 %19 %41
OpControlBarrier %45 %45 %46
OpLoopMerge %44 %43 None
OpBranchConditional %40 %44 %43
%44 = OpLabel
OpReturn
OpFunctionEnd
#endif
