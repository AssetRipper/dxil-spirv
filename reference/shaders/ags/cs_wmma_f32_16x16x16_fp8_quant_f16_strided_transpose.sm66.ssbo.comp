#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _21;

layout(set = 0, binding = 0, std430) writeonly buffer _23_25
{
    uint8_t _m0[];
} _25;

coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> CoopMatFP8toFP16(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _43)
{
    uint _51;
    _51 = 0u;
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> coop_output;
    for (;;)
    {
        uint _52 = _51 + 1u;
        coop_output[_51] = int16BitsToFloat16((int16_t(int8_t(_43[_51])) << 7s) & (-16385s));
        if (_52 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA>(0).length()))
        {
            _51 = _52;
        }
        else
        {
            break;
        }
    }
    return coop_output * float16_t(256.0);
}

coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> CoopMatFP8toFP16_1(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _75)
{
    uint _83;
    _83 = 0u;
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> coop_output;
    for (;;)
    {
        uint _84 = _83 + 1u;
        coop_output[_83] = int16BitsToFloat16((int16_t(int8_t(_75[_83])) << 7s) & (-16385s));
        if (_84 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB>(0).length()))
        {
            _83 = _84;
        }
        else
        {
            break;
        }
    }
    return coop_output * float16_t(256.0);
}

void main()
{
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _30;
    coopMatLoad(_30, _21._m0, 0u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _33;
    coopMatLoad(_33, _21._m0, 512u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _37;
    coopMatLoad(_37, _21._m0, 1024u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _70 = _30;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _96 = _33;
    coopMatStore(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(coopMatMulAdd(CoopMatFP8toFP16(_70), CoopMatFP8toFP16_1(_96), _37, 0)), _25._m0, 0u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 102
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main"
OpExecutionMode %3 LocalSize 32 1 1
OpExecutionMode %3 DenormPreserve 16
OpName %3 "main"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %44 "CoopMatFP8toFP16"
OpName %47 "coop_output"
OpName %76 "CoopMatFP8toFP16"
OpName %79 "coop_output"
OpDecorate %18 ArrayStride 1
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 1
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 8 0
%6 = OpTypeInt 32 0
%7 = OpConstant %6 0
%8 = OpConstant %6 16
%10 = OpConstant %6 3
%9 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %7
%11 = OpConstant %6 1
%12 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %11
%13 = OpTypeFloat 32
%14 = OpConstant %6 2
%15 = OpTypeCooperativeMatrixKHR %13 %10 %8 %8 %14
%16 = OpTypeFloat 16
%17 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %14
%18 = OpTypeRuntimeArray %5
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %5
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%27 = OpTypePointer StorageBuffer %5
%29 = OpConstant %6 32
%32 = OpConstant %6 512
%35 = OpConstant %6 1024
%36 = OpConstant %6 64
%39 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %7
%40 = OpTypeBool
%41 = OpTypePointer Function %9
%42 = OpTypeFunction %39 %41
%46 = OpTypePointer Function %39
%53 = OpTypePointer Function %5
%56 = OpTypeInt 16 1
%59 = OpConstant %56 7
%61 = OpConstant %56 -16385
%63 = OpTypePointer Function %16
%68 = OpConstant %16 0x1p+8
%72 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %11
%73 = OpTypePointer Function %12
%74 = OpTypeFunction %72 %73
%78 = OpTypePointer Function %72
%3 = OpFunction %1 None %2
%4 = OpLabel
%70 = OpVariable %41 Function
%96 = OpVariable %73 Function
OpBranch %100
%100 = OpLabel
%28 = OpAccessChain %27 %21 %7 %7
%30 = OpCooperativeMatrixLoadKHR %9 %28 %11 %29
%31 = OpAccessChain %27 %21 %7 %32
%33 = OpCooperativeMatrixLoadKHR %12 %31 %11 %29
%34 = OpAccessChain %27 %21 %7 %35
%37 = OpCooperativeMatrixLoadKHR %15 %34 %11 %36
OpStore %70 %30
%71 = OpFunctionCall %39 %44 %70
OpStore %96 %33
%97 = OpFunctionCall %72 %76 %96
%38 = OpCooperativeMatrixMulAddKHR %15 %71 %97 %37
%98 = OpFConvert %17 %38
%99 = OpAccessChain %27 %25 %7 %7
OpCooperativeMatrixStoreKHR %99 %98 %11 %36
OpReturn
OpFunctionEnd
%44 = OpFunction %39 None %42
%43 = OpFunctionParameter %41
%45 = OpLabel
%47 = OpVariable %46 Function
%48 = OpCooperativeMatrixLengthKHR %6 %9
OpBranch %49
%49 = OpLabel
%51 = OpPhi %6 %7 %45 %52 %49
%52 = OpIAdd %6 %51 %11
%54 = OpInBoundsAccessChain %53 %43 %51
%55 = OpLoad %5 %54
%57 = OpSConvert %56 %55
%58 = OpShiftLeftLogical %56 %57 %59
%60 = OpBitwiseAnd %56 %58 %61
%62 = OpBitcast %16 %60
%64 = OpInBoundsAccessChain %63 %47 %51
OpStore %64 %62
%65 = OpULessThan %40 %52 %48
OpLoopMerge %50 %49 None
OpBranchConditional %65 %49 %50
%50 = OpLabel
%66 = OpLoad %39 %47
%67 = OpMatrixTimesScalar %39 %66 %68
OpReturnValue %67
OpFunctionEnd
%76 = OpFunction %72 None %74
%75 = OpFunctionParameter %73
%77 = OpLabel
%79 = OpVariable %78 Function
%80 = OpCooperativeMatrixLengthKHR %6 %12
OpBranch %81
%81 = OpLabel
%83 = OpPhi %6 %7 %77 %84 %81
%84 = OpIAdd %6 %83 %11
%85 = OpInBoundsAccessChain %53 %75 %83
%86 = OpLoad %5 %85
%87 = OpSConvert %56 %86
%88 = OpShiftLeftLogical %56 %87 %59
%89 = OpBitwiseAnd %56 %88 %61
%90 = OpBitcast %16 %89
%91 = OpInBoundsAccessChain %63 %79 %83
OpStore %91 %90
%92 = OpULessThan %40 %84 %80
OpLoopMerge %82 %81 None
OpBranchConditional %92 %81 %82
%82 = OpLabel
%93 = OpLoad %72 %79
%94 = OpMatrixTimesScalar %72 %93 %68
OpReturnValue %94
OpFunctionEnd
#endif
