#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_spirv_intrinsics : require
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _21;

layout(set = 0, binding = 0, std430) writeonly buffer _23_25
{
    uint8_t _m0[];
} _25;

shared uint LDSTransposeScratch[256];

spirv_instruction(set = "GLSL.std.450", id = 81) float16_t spvNClamp(float16_t, float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec2 spvNClamp(f16vec2, f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec3 spvNClamp(f16vec3, f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec4 spvNClamp(f16vec4, f16vec4, f16vec4);

coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatSaturateFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _55)
{
    uint _62;
    _62 = 0u;
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _63 = _62 + 1u;
        coop_output[_62] = spvNClamp(_55[_62], float16_t(-448.0), float16_t(448.0));
        if (_63 < uint(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _62 = _63;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> CoopMatFP16toFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _87)
{
    uint _95;
    _95 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> coop_output;
    for (;;)
    {
        uint _96 = _95 + 1u;
        int16_t _99 = float16BitsToInt16(_87[_95]);
        int16_t _108 = (_99 << int16_t(1us)) - 16384s;
        int16_t _112 = (_108 >> 11s) - 1s;
        int16_t _124 = (_108 & ((_112 & (-2048s)) ^ (-1s))) | (_112 & 2048s);
        i8vec2 _131 = unpack8(_124 >> max((-_112), 0s));
        int8_t _134 = _131.y;
        coop_output[_95] = ((uint8_t(_134) + ((uint8_t((_134 & int8_t(1)) | (_131.x | int8_t(_124 & 127s))) > uint8_t(128)) ? uint8_t(1) : uint8_t(0))) & uint8_t(127)) | (unpack8(_99).y & uint8_t(128));
        if (_96 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB>(0).length()))
        {
            _95 = _96;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

void main()
{
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _30;
    coopMatLoad(_30, _21._m0, 0u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _38 = gl_SubgroupID * 256u;
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_30, LDSTransposeScratch, _38, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _42;
    coopMatLoad(_42, LDSTransposeScratch, _38, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _44 = gl_SubgroupID * 256u;
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_30, LDSTransposeScratch, _44, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _46;
    coopMatLoad(_46, LDSTransposeScratch, _44, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _48 = coopMatMulAdd(_42, _46, coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(_30), 0);
    coopMatStore(_48, _25._m0, 0u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _75 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(_48);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _76 = CoopMatSaturateFP8(_75);
    uint _78 = gl_SubgroupID * 256u;
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_76, LDSTransposeScratch, _78, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _80;
    coopMatLoad(_80, LDSTransposeScratch, _78, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _151 = _80;
    coopMatStore(CoopMatFP16toFP8(_151), _25._m0, 1024u, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _154 = gl_SubgroupID * 256u;
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_80, LDSTransposeScratch, _154, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _156;
    coopMatLoad(_156, LDSTransposeScratch, _154, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopMatStore(coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(_156), _25._m0, 2048u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.6
; Generator: Unknown(30017); 21022
; Bound: 162
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability GroupNonUniform
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability VulkanMemoryModel
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
%67 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical Vulkan
OpEntryPoint GLCompute %15 "main" %21 %25 %34 %36
OpExecutionMode %15 LocalSize 32 1 1
OpExecutionMode %15 DenormPreserve 16
OpName %15 "main"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %34 "LDSTransposeScratch"
OpName %56 "CoopMatSaturateFP8"
OpName %58 "coop_output"
OpName %88 "CoopMatFP16toFP8"
OpName %91 "coop_output"
OpDecorate %18 ArrayStride 1
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 1
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
OpDecorate %36 BuiltIn SubgroupId
%1 = OpTypeFloat 16
%2 = OpTypeInt 32 0
%3 = OpConstant %2 2
%4 = OpConstant %2 16
%6 = OpConstant %2 3
%5 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %3
%7 = OpConstant %2 0
%8 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %7
%9 = OpConstant %2 1
%10 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %9
%11 = OpTypeFloat 32
%12 = OpTypeCooperativeMatrixKHR %11 %6 %4 %4 %3
%13 = OpTypeVoid
%14 = OpTypeFunction %13
%17 = OpTypeInt 8 0
%18 = OpTypeRuntimeArray %17
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %17
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%27 = OpTypePointer StorageBuffer %17
%29 = OpConstant %2 32
%31 = OpConstant %2 256
%32 = OpTypeArray %2 %31
%33 = OpTypePointer Workgroup %32
%34 = OpVariable %33 Workgroup
%35 = OpTypePointer Input %2
%36 = OpVariable %35 Input
%39 = OpTypePointer Workgroup %2
%41 = OpConstant %2 24840
%50 = OpConstant %2 64
%52 = OpTypeBool
%53 = OpTypePointer Function %5
%54 = OpTypeFunction %5 %53
%64 = OpTypePointer Function %1
%69 = OpConstant %1 -0x1.cp+8
%70 = OpConstant %1 0x1.cp+8
%82 = OpConstant %2 1024
%83 = OpTypeCooperativeMatrixKHR %17 %6 %4 %4 %9
%84 = OpTypeInt 16 1
%85 = OpTypePointer Function %10
%86 = OpTypeFunction %83 %85
%90 = OpTypePointer Function %83
%100 = OpTypeVector %17 2
%104 = OpConstant %17 128
%106 = OpTypeInt 16 0
%107 = OpConstant %106 1
%109 = OpConstant %84 16384
%111 = OpConstant %84 11
%113 = OpConstant %84 1
%116 = OpConstant %84 0
%118 = OpConstant %84 2048
%120 = OpConstant %84 -2048
%122 = OpConstant %84 -1
%126 = OpConstant %84 127
%127 = OpTypeInt 8 1
%130 = OpTypeVector %127 2
%136 = OpConstant %127 1
%140 = OpConstant %17 1
%141 = OpConstant %17 0
%144 = OpConstant %17 127
%146 = OpTypePointer Function %17
%159 = OpConstant %2 2048
%15 = OpFunction %13 None %14
%16 = OpLabel
%75 = OpVariable %53 Function
%151 = OpVariable %85 Function
OpBranch %160
%160 = OpLabel
%28 = OpAccessChain %27 %21 %7 %7
%30 = OpCooperativeMatrixLoadKHR %5 %28 %9 %29 NonPrivatePointer
%37 = OpLoad %2 %36
%38 = OpIMul %2 %37 %31
%40 = OpInBoundsAccessChain %39 %34 %38
OpControlBarrier %6 %6 %41
OpCooperativeMatrixStoreKHR %40 %30 %9 %4 NonPrivatePointer
OpControlBarrier %6 %6 %41
%42 = OpCooperativeMatrixLoadKHR %8 %40 %9 %4 NonPrivatePointer
%43 = OpLoad %2 %36
%44 = OpIMul %2 %43 %31
%45 = OpInBoundsAccessChain %39 %34 %44
OpControlBarrier %6 %6 %41
OpCooperativeMatrixStoreKHR %45 %30 %9 %4 NonPrivatePointer
OpControlBarrier %6 %6 %41
%46 = OpCooperativeMatrixLoadKHR %10 %45 %9 %4 NonPrivatePointer
%47 = OpFConvert %12 %30
%48 = OpCooperativeMatrixMulAddKHR %12 %42 %46 %47
%49 = OpAccessChain %27 %25 %7 %7
OpCooperativeMatrixStoreKHR %49 %48 %9 %50 NonPrivatePointer
%51 = OpFConvert %5 %48
OpStore %75 %51
%76 = OpFunctionCall %5 %56 %75
%77 = OpLoad %2 %36
%78 = OpIMul %2 %77 %31
%79 = OpInBoundsAccessChain %39 %34 %78
OpControlBarrier %6 %6 %41
OpCooperativeMatrixStoreKHR %79 %76 %9 %4 NonPrivatePointer
OpControlBarrier %6 %6 %41
%80 = OpCooperativeMatrixLoadKHR %10 %79 %9 %4 NonPrivatePointer
%81 = OpAccessChain %27 %25 %7 %82
OpStore %151 %80
%152 = OpFunctionCall %83 %88 %151
OpCooperativeMatrixStoreKHR %81 %152 %9 %4 NonPrivatePointer
%153 = OpLoad %2 %36
%154 = OpIMul %2 %153 %31
%155 = OpInBoundsAccessChain %39 %34 %154
OpControlBarrier %6 %6 %41
OpCooperativeMatrixStoreKHR %155 %80 %9 %4 NonPrivatePointer
OpControlBarrier %6 %6 %41
%156 = OpCooperativeMatrixLoadKHR %5 %155 %9 %4 NonPrivatePointer
%157 = OpFConvert %12 %156
%158 = OpAccessChain %27 %25 %7 %159
OpCooperativeMatrixStoreKHR %158 %157 %9 %50 NonPrivatePointer
OpReturn
OpFunctionEnd
%56 = OpFunction %5 None %54
%55 = OpFunctionParameter %53
%57 = OpLabel
%58 = OpVariable %53 Function
%59 = OpCooperativeMatrixLengthKHR %2 %5
OpBranch %60
%60 = OpLabel
%62 = OpPhi %2 %7 %57 %63 %60
%63 = OpIAdd %2 %62 %9
%65 = OpInBoundsAccessChain %64 %55 %62
%66 = OpLoad %1 %65
%68 = OpExtInst %1 %67 NClamp %66 %69 %70
%71 = OpInBoundsAccessChain %64 %58 %62
OpStore %71 %68
%72 = OpULessThan %52 %63 %59
OpLoopMerge %61 %60 None
OpBranchConditional %72 %60 %61
%61 = OpLabel
%73 = OpLoad %5 %58
OpReturnValue %73
OpFunctionEnd
%88 = OpFunction %83 None %86
%87 = OpFunctionParameter %85
%89 = OpLabel
%91 = OpVariable %90 Function
%92 = OpCooperativeMatrixLengthKHR %2 %83
OpBranch %93
%93 = OpLabel
%95 = OpPhi %2 %7 %89 %96 %93
%96 = OpIAdd %2 %95 %9
%97 = OpInBoundsAccessChain %64 %87 %95
%98 = OpLoad %1 %97
%99 = OpBitcast %84 %98
%101 = OpBitcast %100 %99
%102 = OpCompositeExtract %17 %101 1
%103 = OpBitwiseAnd %17 %102 %104
%105 = OpShiftLeftLogical %84 %99 %107
%108 = OpISub %84 %105 %109
%110 = OpShiftRightArithmetic %84 %108 %111
%112 = OpISub %84 %110 %113
%114 = OpSNegate %84 %112
%115 = OpExtInst %84 %67 SMax %114 %116
%117 = OpBitwiseAnd %84 %112 %118
%119 = OpBitwiseAnd %84 %112 %120
%121 = OpBitwiseXor %84 %119 %122
%123 = OpBitwiseAnd %84 %108 %121
%124 = OpBitwiseOr %84 %123 %117
%125 = OpBitwiseAnd %84 %124 %126
%128 = OpSConvert %127 %125
%129 = OpShiftRightArithmetic %84 %124 %115
%131 = OpBitcast %130 %129
%132 = OpCompositeExtract %127 %131 0
%133 = OpBitwiseOr %127 %132 %128
%134 = OpCompositeExtract %127 %131 1
%135 = OpBitwiseAnd %127 %134 %136
%137 = OpBitwiseOr %127 %135 %133
%138 = OpUGreaterThan %52 %137 %104
%139 = OpSelect %17 %138 %140 %141
%142 = OpIAdd %17 %134 %139
%143 = OpBitwiseAnd %17 %142 %144
%145 = OpBitwiseOr %17 %143 %103
%147 = OpInBoundsAccessChain %146 %91 %95
OpStore %147 %145
%148 = OpULessThan %52 %96 %92
OpLoopMerge %94 %93 None
OpBranchConditional %148 %93 %94
%94 = OpLabel
%149 = OpLoad %83 %91
OpReturnValue %149
OpFunctionEnd
#endif
