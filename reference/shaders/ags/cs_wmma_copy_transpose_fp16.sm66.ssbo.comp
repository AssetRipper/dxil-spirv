#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_spirv_intrinsics : require
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _22;

layout(set = 0, binding = 0, std430) writeonly buffer _24_26
{
    uint8_t _m0[];
} _26;

shared uint LDSTransposeScratch[256];

spirv_instruction(set = "GLSL.std.450", id = 81) float16_t spvNClamp(float16_t, float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec2 spvNClamp(f16vec2, f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec3 spvNClamp(f16vec3, f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec4 spvNClamp(f16vec4, f16vec4, f16vec4);

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatFP16toFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _58)
{
    uint _66;
    _66 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _67 = _66 + 1u;
        int16_t _75 = float16BitsToInt16(spvNClamp(_58[_66], float16_t(-448.0), float16_t(448.0)));
        int16_t _84 = (_75 << int16_t(1us)) - 16384s;
        int16_t _88 = (_84 >> 11s) - 1s;
        int16_t _100 = (_84 & ((_88 & (-2048s)) ^ (-1s))) | (_88 & 2048s);
        i8vec2 _107 = unpack8(_100 >> max((-_88), 0s));
        int8_t _110 = _107.y;
        coop_output[_66] = ((uint8_t(_110) + ((uint8_t((_110 & int8_t(1)) | (_107.x | int8_t(_100 & 127s))) > uint8_t(128)) ? uint8_t(1) : uint8_t(0))) & uint8_t(127)) | (unpack8(_75).y & uint8_t(128));
        if (_67 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _66 = _67;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> CoopMatTransfer(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _130)
{
    uint _138;
    _138 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> coop_output;
    for (;;)
    {
        uint _139 = _138 + 1u;
        coop_output[_138] = _130[_138];
        if (_139 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB>(0).length()))
        {
            _138 = _139;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatTransfer_1(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _151)
{
    uint _158;
    _158 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _159 = _158 + 1u;
        coop_output[_158] = _151[_158];
        if (_159 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _158 = _159;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatFP8toFP16(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _169)
{
    uint _176;
    _176 = 0u;
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _177 = _176 + 1u;
        coop_output[_176] = int16BitsToFloat16((int16_t(int8_t(_169[_176])) << 7s) & (-16385s));
        if (_177 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _176 = _177;
        }
        else
        {
            break;
        }
    }
    return coop_output * float16_t(256.0);
}

void main()
{
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _31;
    coopMatLoad(_31, _22._m0, 0u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _39 = gl_SubgroupID * 256u;
    memoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_31, LDSTransposeScratch, _39, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    memoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _43;
    coopMatLoad(_43, LDSTransposeScratch, _39, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    uint _45 = gl_SubgroupID * 256u;
    memoryBarrierShared();
    subgroupBarrier();
    coopMatStore(_31, LDSTransposeScratch, _45, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    memoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _47;
    coopMatLoad(_47, LDSTransposeScratch, _45, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _49 = coopMatMulAdd(_43, _47, coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(_31), 0);
    coopMatStore(_49, _26._m0, 0u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _127 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(_49);
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _146 = CoopMatFP16toFP8(_127);
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _147 = CoopMatTransfer(_146);
    coopMatStore(_147, _26._m0, 1024u, 16u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _166 = _147;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _192 = CoopMatTransfer_1(_166);
    coopMatStore(coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(CoopMatFP8toFP16(_192)), _26._m0, 2048u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 199
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability GroupNonUniform
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
%71 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %37
OpExecutionMode %3 LocalSize 32 1 1
OpExecutionMode %3 DenormPreserve 16
OpName %3 "main"
OpName %20 "SSBO"
OpName %24 "SSBO"
OpName %35 "LDSTransposeScratch"
OpName %59 "CoopMatFP16toFP8"
OpName %62 "coop_output"
OpName %131 "CoopMatTransfer"
OpName %134 "coop_output"
OpName %152 "CoopMatTransfer"
OpName %154 "coop_output"
OpName %170 "CoopMatFP8toFP16"
OpName %172 "coop_output"
OpDecorate %19 ArrayStride 1
OpMemberDecorate %20 0 Offset 0
OpDecorate %20 Block
OpDecorate %22 DescriptorSet 0
OpDecorate %22 Binding 0
OpDecorate %22 NonWritable
OpDecorate %22 Restrict
OpDecorate %23 ArrayStride 1
OpMemberDecorate %24 0 Offset 0
OpDecorate %24 Block
OpDecorate %26 DescriptorSet 0
OpDecorate %26 Binding 0
OpDecorate %26 NonReadable
OpDecorate %37 BuiltIn SubgroupId
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeFloat 16
%6 = OpTypeInt 32 0
%7 = OpConstant %6 2
%8 = OpConstant %6 16
%10 = OpConstant %6 3
%9 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %7
%11 = OpConstant %6 0
%12 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %11
%13 = OpConstant %6 1
%14 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %13
%15 = OpTypeFloat 32
%16 = OpTypeCooperativeMatrixKHR %15 %10 %8 %8 %7
%17 = OpTypeInt 8 0
%18 = OpTypeCooperativeMatrixKHR %17 %10 %8 %8 %13
%19 = OpTypeRuntimeArray %17
%20 = OpTypeStruct %19
%21 = OpTypePointer StorageBuffer %20
%22 = OpVariable %21 StorageBuffer
%23 = OpTypeRuntimeArray %17
%24 = OpTypeStruct %23
%25 = OpTypePointer StorageBuffer %24
%26 = OpVariable %25 StorageBuffer
%28 = OpTypePointer StorageBuffer %17
%30 = OpConstant %6 32
%32 = OpConstant %6 256
%33 = OpTypeArray %6 %32
%34 = OpTypePointer Workgroup %33
%35 = OpVariable %34 Workgroup
%36 = OpTypePointer Input %6
%37 = OpVariable %36 Input
%40 = OpTypePointer Workgroup %6
%42 = OpConstant %6 264
%51 = OpConstant %6 64
%52 = OpTypeCooperativeMatrixKHR %17 %10 %8 %8 %7
%54 = OpTypeBool
%55 = OpTypeInt 16 1
%56 = OpTypePointer Function %9
%57 = OpTypeFunction %52 %56
%61 = OpTypePointer Function %52
%68 = OpTypePointer Function %5
%73 = OpConstant %5 -0x1.cp+8
%74 = OpConstant %5 0x1.cp+8
%76 = OpTypeVector %17 2
%80 = OpConstant %17 128
%82 = OpTypeInt 16 0
%83 = OpConstant %82 1
%85 = OpConstant %55 16384
%87 = OpConstant %55 11
%89 = OpConstant %55 1
%92 = OpConstant %55 0
%94 = OpConstant %55 2048
%96 = OpConstant %55 -2048
%98 = OpConstant %55 -1
%102 = OpConstant %55 127
%103 = OpTypeInt 8 1
%106 = OpTypeVector %103 2
%112 = OpConstant %103 1
%116 = OpConstant %17 1
%117 = OpConstant %17 0
%120 = OpConstant %17 127
%122 = OpTypePointer Function %17
%129 = OpTypeFunction %18 %61
%133 = OpTypePointer Function %18
%149 = OpConstant %6 1024
%150 = OpTypeFunction %52 %133
%168 = OpTypeFunction %9 %61
%182 = OpConstant %55 7
%184 = OpConstant %55 -16385
%190 = OpConstant %5 0x1p+8
%196 = OpConstant %6 2048
%3 = OpFunction %1 None %2
%4 = OpLabel
%127 = OpVariable %56 Function
%146 = OpVariable %61 Function
%166 = OpVariable %133 Function
%192 = OpVariable %61 Function
OpBranch %197
%197 = OpLabel
%29 = OpAccessChain %28 %22 %11 %11
%31 = OpCooperativeMatrixLoadKHR %9 %29 %13 %30
%38 = OpLoad %6 %37
%39 = OpIMul %6 %38 %32
%41 = OpInBoundsAccessChain %40 %35 %39
OpControlBarrier %10 %7 %42
OpCooperativeMatrixStoreKHR %41 %31 %13 %8
OpControlBarrier %10 %7 %42
%43 = OpCooperativeMatrixLoadKHR %12 %41 %13 %8
%44 = OpLoad %6 %37
%45 = OpIMul %6 %44 %32
%46 = OpInBoundsAccessChain %40 %35 %45
OpControlBarrier %10 %7 %42
OpCooperativeMatrixStoreKHR %46 %31 %13 %8
OpControlBarrier %10 %7 %42
%47 = OpCooperativeMatrixLoadKHR %14 %46 %13 %8
%48 = OpFConvert %16 %31
%49 = OpCooperativeMatrixMulAddKHR %16 %43 %47 %48
%50 = OpAccessChain %28 %26 %11 %11
OpCooperativeMatrixStoreKHR %50 %49 %13 %51
%53 = OpFConvert %9 %49
OpStore %127 %53
%128 = OpFunctionCall %52 %59 %127
OpStore %146 %128
%147 = OpFunctionCall %18 %131 %146
%148 = OpAccessChain %28 %26 %11 %149
OpCooperativeMatrixStoreKHR %148 %147 %13 %8
OpStore %166 %147
%167 = OpFunctionCall %52 %152 %166
OpStore %192 %167
%193 = OpFunctionCall %9 %170 %192
%194 = OpFConvert %16 %193
%195 = OpAccessChain %28 %26 %11 %196
OpCooperativeMatrixStoreKHR %195 %194 %13 %51
OpReturn
OpFunctionEnd
%59 = OpFunction %52 None %57
%58 = OpFunctionParameter %56
%60 = OpLabel
%62 = OpVariable %61 Function
%63 = OpCooperativeMatrixLengthKHR %6 %52
OpBranch %64
%64 = OpLabel
%66 = OpPhi %6 %11 %60 %67 %64
%67 = OpIAdd %6 %66 %13
%69 = OpInBoundsAccessChain %68 %58 %66
%70 = OpLoad %5 %69
%72 = OpExtInst %5 %71 NClamp %70 %73 %74
%75 = OpBitcast %55 %72
%77 = OpBitcast %76 %75
%78 = OpCompositeExtract %17 %77 1
%79 = OpBitwiseAnd %17 %78 %80
%81 = OpShiftLeftLogical %55 %75 %83
%84 = OpISub %55 %81 %85
%86 = OpShiftRightArithmetic %55 %84 %87
%88 = OpISub %55 %86 %89
%90 = OpSNegate %55 %88
%91 = OpExtInst %55 %71 SMax %90 %92
%93 = OpBitwiseAnd %55 %88 %94
%95 = OpBitwiseAnd %55 %88 %96
%97 = OpBitwiseXor %55 %95 %98
%99 = OpBitwiseAnd %55 %84 %97
%100 = OpBitwiseOr %55 %99 %93
%101 = OpBitwiseAnd %55 %100 %102
%104 = OpSConvert %103 %101
%105 = OpShiftRightArithmetic %55 %100 %91
%107 = OpBitcast %106 %105
%108 = OpCompositeExtract %103 %107 0
%109 = OpBitwiseOr %103 %108 %104
%110 = OpCompositeExtract %103 %107 1
%111 = OpBitwiseAnd %103 %110 %112
%113 = OpBitwiseOr %103 %111 %109
%114 = OpUGreaterThan %54 %113 %80
%115 = OpSelect %17 %114 %116 %117
%118 = OpIAdd %17 %110 %115
%119 = OpBitwiseAnd %17 %118 %120
%121 = OpBitwiseOr %17 %119 %79
%123 = OpInBoundsAccessChain %122 %62 %66
OpStore %123 %121
%124 = OpULessThan %54 %67 %63
OpLoopMerge %65 %64 None
OpBranchConditional %124 %64 %65
%65 = OpLabel
%125 = OpLoad %52 %62
OpReturnValue %125
OpFunctionEnd
%131 = OpFunction %18 None %129
%130 = OpFunctionParameter %61
%132 = OpLabel
%134 = OpVariable %133 Function
%135 = OpCooperativeMatrixLengthKHR %6 %18
OpBranch %136
%136 = OpLabel
%138 = OpPhi %6 %11 %132 %139 %136
%139 = OpIAdd %6 %138 %13
%140 = OpInBoundsAccessChain %122 %130 %138
%141 = OpLoad %17 %140
%142 = OpInBoundsAccessChain %122 %134 %138
OpStore %142 %141
%143 = OpULessThan %54 %139 %135
OpLoopMerge %137 %136 None
OpBranchConditional %143 %136 %137
%137 = OpLabel
%144 = OpLoad %18 %134
OpReturnValue %144
OpFunctionEnd
%152 = OpFunction %52 None %150
%151 = OpFunctionParameter %133
%153 = OpLabel
%154 = OpVariable %61 Function
%155 = OpCooperativeMatrixLengthKHR %6 %52
OpBranch %156
%156 = OpLabel
%158 = OpPhi %6 %11 %153 %159 %156
%159 = OpIAdd %6 %158 %13
%160 = OpInBoundsAccessChain %122 %151 %158
%161 = OpLoad %17 %160
%162 = OpInBoundsAccessChain %122 %154 %158
OpStore %162 %161
%163 = OpULessThan %54 %159 %155
OpLoopMerge %157 %156 None
OpBranchConditional %163 %156 %157
%157 = OpLabel
%164 = OpLoad %52 %154
OpReturnValue %164
OpFunctionEnd
%170 = OpFunction %9 None %168
%169 = OpFunctionParameter %61
%171 = OpLabel
%172 = OpVariable %56 Function
%173 = OpCooperativeMatrixLengthKHR %6 %52
OpBranch %174
%174 = OpLabel
%176 = OpPhi %6 %11 %171 %177 %174
%177 = OpIAdd %6 %176 %13
%178 = OpInBoundsAccessChain %122 %169 %176
%179 = OpLoad %17 %178
%180 = OpSConvert %55 %179
%181 = OpShiftLeftLogical %55 %180 %182
%183 = OpBitwiseAnd %55 %181 %184
%185 = OpBitcast %5 %183
%186 = OpInBoundsAccessChain %68 %172 %176
OpStore %186 %185
%187 = OpULessThan %54 %177 %173
OpLoopMerge %175 %174 None
OpBranchConditional %187 %174 %175
%175 = OpLabel
%188 = OpLoad %9 %172
%189 = OpMatrixTimesScalar %9 %188 %190
OpReturnValue %189
OpFunctionEnd
#endif
