#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_shader_subgroup_basic : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _20;

layout(set = 0, binding = 0, std430) writeonly buffer _22_24
{
    uint8_t _m0[];
} _24;

shared uint _28[512];

void main()
{
    coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseA> _33;
    coopMatLoad(_33, _20._m0, 0u, 32u, 0u);
    coopMatStore(_33, _28, 0u, 32u, 0u);
    barrier();
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseA> _38;
    coopMatLoad(_38, _28, 0u, 32u, 1u);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseB> _40;
    coopMatLoad(_40, _28, 0u, 32u, 0u);
    subgroupMemoryBarrierShared();
    subgroupBarrier();
    coopMatStore(coopMatMulAdd(_38, _40, coopmat<float, 3u, 16u, 16u, gl_MatrixUseAccumulator>(0.0), 0), _24._m0, 0u, 64u, 0u);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 48
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main"
OpExecutionMode %3 LocalSize 32 1 1
OpExecutionMode %3 DenormPreserve 16
OpName %3 "main"
OpName %18 "SSBO"
OpName %22 "SSBO"
OpDecorate %17 ArrayStride 1
OpMemberDecorate %18 0 Offset 0
OpDecorate %18 Block
OpDecorate %20 DescriptorSet 0
OpDecorate %20 Binding 0
OpDecorate %20 NonWritable
OpDecorate %20 Restrict
OpDecorate %21 ArrayStride 1
OpMemberDecorate %22 0 Offset 0
OpDecorate %22 Block
OpDecorate %24 DescriptorSet 0
OpDecorate %24 Binding 0
OpDecorate %24 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeFloat 16
%6 = OpTypeInt 32 0
%7 = OpConstant %6 0
%8 = OpConstant %6 16
%10 = OpConstant %6 3
%9 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %7
%11 = OpConstant %6 1
%12 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %11
%13 = OpTypeFloat 32
%14 = OpConstant %6 2
%15 = OpTypeCooperativeMatrixKHR %13 %10 %8 %8 %14
%16 = OpTypeInt 8 0
%17 = OpTypeRuntimeArray %16
%18 = OpTypeStruct %17
%19 = OpTypePointer StorageBuffer %18
%20 = OpVariable %19 StorageBuffer
%21 = OpTypeRuntimeArray %16
%22 = OpTypeStruct %21
%23 = OpTypePointer StorageBuffer %22
%24 = OpVariable %23 StorageBuffer
%25 = OpConstant %6 512
%26 = OpTypeArray %6 %25
%27 = OpTypePointer Workgroup %26
%28 = OpVariable %27 Workgroup
%30 = OpTypePointer StorageBuffer %16
%32 = OpConstant %6 32
%34 = OpTypePointer Workgroup %6
%36 = OpConstant %6 264
%41 = OpConstant %13 0
%42 = OpConstantComposite %15 %41
%45 = OpConstant %6 64
%3 = OpFunction %1 None %2
%4 = OpLabel
OpBranch %46
%46 = OpLabel
%31 = OpAccessChain %30 %20 %7 %7
%33 = OpCooperativeMatrixLoadKHR %9 %31 %7 %32
%35 = OpAccessChain %34 %28 %7
OpCooperativeMatrixStoreKHR %35 %33 %7 %32
OpControlBarrier %14 %14 %36
%37 = OpAccessChain %34 %28 %7
OpControlBarrier %10 %10 %36
%38 = OpCooperativeMatrixLoadKHR %9 %37 %11 %32
OpControlBarrier %10 %10 %36
%39 = OpAccessChain %34 %28 %7
OpControlBarrier %10 %10 %36
%40 = OpCooperativeMatrixLoadKHR %12 %39 %7 %32
OpControlBarrier %10 %10 %36
%43 = OpCooperativeMatrixMulAddKHR %15 %38 %40 %42
%44 = OpAccessChain %30 %24 %7 %7
OpCooperativeMatrixStoreKHR %44 %43 %7 %45
OpReturn
OpFunctionEnd
#endif
