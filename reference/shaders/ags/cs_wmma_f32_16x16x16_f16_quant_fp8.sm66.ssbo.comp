#version 460
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
#extension GL_KHR_memory_scope_semantics : require
#extension GL_EXT_spirv_intrinsics : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _21;

layout(set = 0, binding = 0, std430) writeonly buffer _23_25
{
    uint8_t _m0[];
} _25;

spirv_instruction(set = "GLSL.std.450", id = 81) float16_t spvNClamp(float16_t, float16_t, float16_t);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec2 spvNClamp(f16vec2, f16vec2, f16vec2);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec3 spvNClamp(f16vec3, f16vec3, f16vec3);
spirv_instruction(set = "GLSL.std.450", id = 81) f16vec4 spvNClamp(f16vec4, f16vec4, f16vec4);

coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatSaturateFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _43)
{
    uint _50;
    _50 = 0u;
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _51 = _50 + 1u;
        coop_output[_50] = spvNClamp(_43[_50], float16_t(-448.0), float16_t(448.0));
        if (_51 < uint(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _50 = _51;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> CoopMatFP16toFP8(coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _69)
{
    uint _77;
    _77 = 0u;
    coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> coop_output;
    for (;;)
    {
        uint _78 = _77 + 1u;
        int16_t _81 = float16BitsToInt16(_69[_77]);
        int16_t _89 = (_81 << int16_t(1us)) - 16384s;
        int16_t _93 = (_89 >> 11s) - 1s;
        int16_t _105 = (_89 & ((_93 & (-2048s)) ^ (-1s))) | (_93 & 2048s);
        int16_t _108 = _105 >> max((-_93), 0s);
        int16_t _110 = int16_t(uint16_t(_108) >> uint16_t(8s));
        coop_output[_77] = uint8_t(((_110 + int16_t(uint16_t(((_110 & 1s) | (_108 | (_105 & 127s))) << 8s) > 32768us)) & 127s) | (int16_t(uint16_t(_81) >> 15us) << 7s));
        if (_78 < uint(coopmat<uint8_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(0).length()))
        {
            _77 = _78;
        }
        else
        {
            break;
        }
    }
    return coop_output;
}

void main()
{
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseA> _30;
    coopMatLoad(_30, _21._m0, 0u, 32u, gl_CooperativeMatrixLayoutRowMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseB> _33;
    coopMatLoad(_33, _21._m0, 512u, 32u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _37;
    coopMatLoad(_37, _21._m0, 1024u, 64u, gl_CooperativeMatrixLayoutColumnMajor);
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _63 = coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator>(coopMatMulAdd(_30, _33, _37, 0));
    coopmat<float16_t, gl_ScopeSubgroup, 16u, 16u, gl_MatrixUseAccumulator> _127 = CoopMatSaturateFP8(_63);
    coopMatStore(CoopMatFP16toFP8(_127), _25._m0, 0u, 16u, gl_CooperativeMatrixLayoutColumnMajor);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.6
; Generator: Unknown(30017); 21022
; Bound: 131
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability VulkanMemoryModel
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
%55 = OpExtInstImport "GLSL.std.450"
OpMemoryModel Logical Vulkan
OpEntryPoint GLCompute %15 "main" %21 %25
OpExecutionMode %15 LocalSize 32 1 1
OpExecutionMode %15 DenormPreserve 16
OpName %15 "main"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %44 "CoopMatSaturateFP8"
OpName %46 "coop_output"
OpName %70 "CoopMatFP16toFP8"
OpName %73 "coop_output"
OpDecorate %18 ArrayStride 1
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 1
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
%1 = OpTypeFloat 16
%2 = OpTypeInt 32 0
%3 = OpConstant %2 0
%4 = OpConstant %2 16
%6 = OpConstant %2 3
%5 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %3
%7 = OpConstant %2 1
%8 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %7
%9 = OpTypeFloat 32
%10 = OpConstant %2 2
%11 = OpTypeCooperativeMatrixKHR %9 %6 %4 %4 %10
%12 = OpTypeCooperativeMatrixKHR %1 %6 %4 %4 %10
%13 = OpTypeVoid
%14 = OpTypeFunction %13
%17 = OpTypeInt 8 0
%18 = OpTypeRuntimeArray %17
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %17
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%27 = OpTypePointer StorageBuffer %17
%29 = OpConstant %2 32
%32 = OpConstant %2 512
%35 = OpConstant %2 1024
%36 = OpConstant %2 64
%40 = OpTypeBool
%41 = OpTypePointer Function %12
%42 = OpTypeFunction %12 %41
%52 = OpTypePointer Function %1
%57 = OpConstant %1 -0x1.cp+8
%58 = OpConstant %1 0x1.cp+8
%66 = OpTypeCooperativeMatrixKHR %17 %6 %4 %4 %10
%67 = OpTypeInt 16 1
%68 = OpTypeFunction %66 %41
%72 = OpTypePointer Function %66
%83 = OpTypeInt 16 0
%84 = OpConstant %83 15
%86 = OpConstant %67 7
%88 = OpConstant %83 1
%90 = OpConstant %67 16384
%92 = OpConstant %67 11
%94 = OpConstant %67 1
%97 = OpConstant %67 0
%99 = OpConstant %67 2048
%101 = OpConstant %67 -2048
%103 = OpConstant %67 -1
%107 = OpConstant %67 127
%111 = OpConstant %67 8
%116 = OpConstant %83 32768
%122 = OpTypePointer Function %17
%15 = OpFunction %13 None %14
%16 = OpLabel
%63 = OpVariable %41 Function
%127 = OpVariable %41 Function
OpBranch %129
%129 = OpLabel
%28 = OpAccessChain %27 %21 %3 %3
%30 = OpCooperativeMatrixLoadKHR %5 %28 %3 %29 NonPrivatePointer
%31 = OpAccessChain %27 %21 %3 %32
%33 = OpCooperativeMatrixLoadKHR %8 %31 %7 %29 NonPrivatePointer
%34 = OpAccessChain %27 %21 %3 %35
%37 = OpCooperativeMatrixLoadKHR %11 %34 %7 %36 NonPrivatePointer
%38 = OpCooperativeMatrixMulAddKHR %11 %30 %33 %37
%39 = OpFConvert %12 %38
OpStore %63 %39
%64 = OpFunctionCall %12 %44 %63
%65 = OpAccessChain %27 %25 %3 %3
OpStore %127 %64
%128 = OpFunctionCall %66 %70 %127
OpCooperativeMatrixStoreKHR %65 %128 %7 %4 NonPrivatePointer
OpReturn
OpFunctionEnd
%44 = OpFunction %12 None %42
%43 = OpFunctionParameter %41
%45 = OpLabel
%46 = OpVariable %41 Function
%47 = OpCooperativeMatrixLengthKHR %2 %12
OpBranch %48
%48 = OpLabel
%50 = OpPhi %2 %3 %45 %51 %48
%51 = OpIAdd %2 %50 %7
%53 = OpInBoundsAccessChain %52 %43 %50
%54 = OpLoad %1 %53
%56 = OpExtInst %1 %55 NClamp %54 %57 %58
%59 = OpInBoundsAccessChain %52 %46 %50
OpStore %59 %56
%60 = OpULessThan %40 %51 %47
OpLoopMerge %49 %48 None
OpBranchConditional %60 %48 %49
%49 = OpLabel
%61 = OpLoad %12 %46
OpReturnValue %61
OpFunctionEnd
%70 = OpFunction %66 None %68
%69 = OpFunctionParameter %41
%71 = OpLabel
%73 = OpVariable %72 Function
%74 = OpCooperativeMatrixLengthKHR %2 %66
OpBranch %75
%75 = OpLabel
%77 = OpPhi %2 %3 %71 %78 %75
%78 = OpIAdd %2 %77 %7
%79 = OpInBoundsAccessChain %52 %69 %77
%80 = OpLoad %1 %79
%81 = OpBitcast %67 %80
%82 = OpShiftRightLogical %67 %81 %84
%85 = OpShiftLeftLogical %67 %82 %86
%87 = OpShiftLeftLogical %67 %81 %88
%89 = OpISub %67 %87 %90
%91 = OpShiftRightArithmetic %67 %89 %92
%93 = OpISub %67 %91 %94
%95 = OpSNegate %67 %93
%96 = OpExtInst %67 %55 SMax %95 %97
%98 = OpBitwiseAnd %67 %93 %99
%100 = OpBitwiseAnd %67 %93 %101
%102 = OpBitwiseXor %67 %100 %103
%104 = OpBitwiseAnd %67 %89 %102
%105 = OpBitwiseOr %67 %104 %98
%106 = OpBitwiseAnd %67 %105 %107
%108 = OpShiftRightArithmetic %67 %105 %96
%109 = OpBitwiseOr %67 %108 %106
%110 = OpShiftRightLogical %67 %108 %111
%112 = OpBitwiseAnd %67 %110 %94
%113 = OpBitwiseOr %67 %112 %109
%114 = OpShiftLeftLogical %67 %113 %111
%115 = OpUGreaterThan %40 %114 %116
%117 = OpSelect %67 %115 %94 %97
%118 = OpIAdd %67 %110 %117
%119 = OpBitwiseAnd %67 %118 %107
%120 = OpBitwiseOr %67 %119 %85
%121 = OpUConvert %17 %120
%123 = OpInBoundsAccessChain %122 %73 %77
OpStore %123 %121
%124 = OpULessThan %40 %78 %74
OpLoopMerge %76 %75 None
OpBranchConditional %124 %75 %76
%76 = OpLabel
%125 = OpLoad %66 %73
OpReturnValue %125
OpFunctionEnd
#endif
