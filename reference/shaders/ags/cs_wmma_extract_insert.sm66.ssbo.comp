#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#extension GL_KHR_cooperative_matrix : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint _m0[];
} _14;

layout(set = 0, binding = 0, std430) writeonly buffer _16_18
{
    uint _m0[];
} _18;

void main()
{
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _26;
    coopMatLoad(_26, _14._m0, 0u, 4u, 0u);
    uint _28 = uint(coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA>(0).length()) / 4u;
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _31;
    if (_28 == 0u)
    {
        _31 = _26;
    }
    else
    {
        coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _34;
        uint _35;
        _34 = _26;
        _35 = 0u;
        coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _83;
        coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _38;
        coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _68;
        for (;;)
        {
            _38 = _34;
            uint _39 = _35 * 4u;
            uint _57 = pack32(u8vec4(_38[_39 + 0u], _38[_39 + 1u], _38[_39 + 2u], _38[_39 + 3u]));
            uint _59 = _35 + (_28 * gl_LocalInvocationIndex);
            _18._m0[_59 + 64u] = _57;
            _68 = _34;
            u8vec4 _69 = unpack8(_57 ^ 16711935u);
            uint _70 = _35 * 4u;
            _68[_70 + 0u] = _69.x;
            _68[_70 + 1u] = _69.y;
            _68[_70 + 2u] = _69.z;
            _68[_70 + 3u] = _69.w;
            _83 = _68;
            uint _36 = _35 + 1u;
            if (_36 == _28)
            {
                break;
            }
            else
            {
                _34 = _83;
                _35 = _36;
            }
        }
        _31 = _83;
    }
    coopMatStore(_31, _18._m0, 0u, 4u, 0u);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 91
; Schema: 0
OpCapability Shader
OpCapability Int8
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_cooperative_matrix"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main" %20
OpExecutionMode %3 LocalSize 32 1 1
OpName %3 "main"
OpName %12 "SSBO"
OpName %16 "SSBO"
OpDecorate %11 ArrayStride 4
OpMemberDecorate %12 0 Offset 0
OpDecorate %12 Block
OpDecorate %14 DescriptorSet 0
OpDecorate %14 Binding 0
OpDecorate %14 NonWritable
OpDecorate %14 Restrict
OpDecorate %15 ArrayStride 4
OpMemberDecorate %16 0 Offset 0
OpDecorate %16 Block
OpDecorate %18 DescriptorSet 0
OpDecorate %18 Binding 0
OpDecorate %18 NonReadable
OpDecorate %20 BuiltIn LocalInvocationIndex
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 8 0
%6 = OpTypeInt 32 0
%7 = OpConstant %6 0
%8 = OpConstant %6 16
%10 = OpConstant %6 3
%9 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %7
%11 = OpTypeRuntimeArray %6
%12 = OpTypeStruct %11
%13 = OpTypePointer StorageBuffer %12
%14 = OpVariable %13 StorageBuffer
%15 = OpTypeRuntimeArray %6
%16 = OpTypeStruct %15
%17 = OpTypePointer StorageBuffer %16
%18 = OpVariable %17 StorageBuffer
%19 = OpTypePointer Input %6
%20 = OpVariable %19 Input
%23 = OpConstant %6 4
%24 = OpTypePointer StorageBuffer %6
%29 = OpTypeBool
%37 = OpTypePointer Function %9
%41 = OpTypePointer Function %5
%45 = OpConstant %6 1
%49 = OpConstant %6 2
%55 = OpTypeVector %5 4
%62 = OpConstant %6 256
%64 = OpConstant %6 64
%67 = OpConstant %6 16711935
%3 = OpFunction %1 None %2
%4 = OpLabel
%38 = OpVariable %37 Function
%68 = OpVariable %37 Function
OpBranch %85
%85 = OpLabel
%21 = OpLoad %6 %20
%25 = OpAccessChain %24 %14 %7 %7
%26 = OpCooperativeMatrixLoadKHR %9 %25 %7 %23
%27 = OpCooperativeMatrixLengthKHR %6 %9
%28 = OpUDiv %6 %27 %23
%30 = OpIEqual %29 %28 %7
OpSelectionMerge %89 None
OpBranchConditional %30 %89 %86
%86 = OpLabel
OpBranch %87
%87 = OpLabel
%34 = OpPhi %9 %26 %86 %83 %87
%35 = OpPhi %6 %7 %86 %36 %87
OpStore %38 %34
%39 = OpIMul %6 %35 %23
%40 = OpIAdd %6 %39 %7
%42 = OpInBoundsAccessChain %41 %38 %40
%43 = OpLoad %5 %42
%44 = OpIAdd %6 %39 %45
%46 = OpInBoundsAccessChain %41 %38 %44
%47 = OpLoad %5 %46
%48 = OpIAdd %6 %39 %49
%50 = OpInBoundsAccessChain %41 %38 %48
%51 = OpLoad %5 %50
%52 = OpIAdd %6 %39 %10
%53 = OpInBoundsAccessChain %41 %38 %52
%54 = OpLoad %5 %53
%56 = OpCompositeConstruct %55 %43 %47 %51 %54
%57 = OpBitcast %6 %56
%58 = OpIMul %6 %28 %21
%59 = OpIAdd %6 %35 %58
%60 = OpShiftLeftLogical %6 %59 %49
%61 = OpIAdd %6 %60 %62
%63 = OpIAdd %6 %59 %64
%65 = OpAccessChain %24 %18 %7 %63
OpStore %65 %57
%66 = OpBitwiseXor %6 %57 %67
OpStore %68 %34
%69 = OpBitcast %55 %66
%70 = OpIMul %6 %35 %23
%71 = OpCompositeExtract %5 %69 0
%72 = OpIAdd %6 %70 %7
%73 = OpInBoundsAccessChain %41 %68 %72
OpStore %73 %71
%74 = OpCompositeExtract %5 %69 1
%75 = OpIAdd %6 %70 %45
%76 = OpInBoundsAccessChain %41 %68 %75
OpStore %76 %74
%77 = OpCompositeExtract %5 %69 2
%78 = OpIAdd %6 %70 %49
%79 = OpInBoundsAccessChain %41 %68 %78
OpStore %79 %77
%80 = OpCompositeExtract %5 %69 3
%81 = OpIAdd %6 %70 %10
%82 = OpInBoundsAccessChain %41 %68 %81
OpStore %82 %80
%83 = OpLoad %9 %68
%36 = OpIAdd %6 %35 %45
%84 = OpIEqual %29 %36 %28
OpLoopMerge %88 %87 None
OpBranchConditional %84 %88 %87
%88 = OpLabel
OpBranch %89
%89 = OpLabel
%31 = OpPhi %9 %26 %85 %83 %88
%33 = OpAccessChain %24 %18 %7 %7
OpCooperativeMatrixStoreKHR %33 %31 %7 %23
OpReturn
OpFunctionEnd
#endif
