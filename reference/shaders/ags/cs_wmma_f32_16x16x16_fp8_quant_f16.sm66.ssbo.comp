#version 460
#extension GL_EXT_shader_explicit_arithmetic_types_int8 : require
#extension GL_EXT_shader_8bit_storage : require
#if defined(GL_AMD_gpu_shader_half_float)
#extension GL_AMD_gpu_shader_half_float : require
#elif defined(GL_EXT_shader_explicit_arithmetic_types_float16)
#extension GL_EXT_shader_explicit_arithmetic_types_float16 : require
#else
#error No extension available for FP16.
#endif
#extension GL_EXT_shader_16bit_storage : require
#extension GL_EXT_shader_explicit_arithmetic_types_int16 : require
#extension GL_KHR_cooperative_matrix : require
layout(local_size_x = 32, local_size_y = 1, local_size_z = 1) in;

layout(set = 0, binding = 0, std430) restrict readonly buffer SSBO
{
    uint8_t _m0[];
} _21;

layout(set = 0, binding = 0, std430) writeonly buffer _23_25
{
    uint8_t _m0[];
} _25;

coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseA> CoopMatFP8toFP16(coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _42)
{
    uint _50;
    _50 = 0u;
    coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseA> coop_output;
    for (;;)
    {
        uint _51 = _50 + 1u;
        coop_output[_50] = int16BitsToFloat16((int16_t(int8_t(_42[_50])) << 7s) & (-16385s));
        if (_51 < uint(coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA>(0).length()))
        {
            _50 = _51;
        }
        else
        {
            break;
        }
    }
    return coop_output * float16_t(256.0);
}

coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseB> CoopMatFP8toFP16(coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseB> _74)
{
    uint _82;
    _82 = 0u;
    coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseB> coop_output;
    for (;;)
    {
        uint _83 = _82 + 1u;
        coop_output[_82] = int16BitsToFloat16((int16_t(int8_t(_74[_82])) << 7s) & (-16385s));
        if (_83 < uint(coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseB>(0).length()))
        {
            _82 = _83;
        }
        else
        {
            break;
        }
    }
    return coop_output * float16_t(256.0);
}

void main()
{
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _29;
    coopMatLoad(_29, _21._m0, 0u, 16u, 0u);
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseB> _32;
    coopMatLoad(_32, _21._m0, 256u, 16u, 0u);
    coopmat<float, 3u, 16u, 16u, gl_MatrixUseAccumulator> _36;
    coopMatLoad(_36, _21._m0, 512u, 64u, 0u);
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseA> _69 = _29;
    coopmat<uint8_t, 3u, 16u, 16u, gl_MatrixUseB> _95 = _32;
    coopMatStore(coopmat<float16_t, 3u, 16u, 16u, gl_MatrixUseAccumulator>(coopMatMulAdd(CoopMatFP8toFP16(_69), CoopMatFP8toFP16(_95), _36, 0)), _25._m0, 0u, 32u, 0u);
}


#if 0
// SPIR-V disassembly
// WaveSize(32)
; SPIR-V
; Version: 1.3
; Generator: Unknown(30017); 21022
; Bound: 102
; Schema: 0
OpCapability Shader
OpCapability Float16
OpCapability Int16
OpCapability Int8
OpCapability StorageBuffer8BitAccess
OpCapability DenormPreserve
OpCapability CooperativeMatrixKHR
OpExtension "SPV_KHR_8bit_storage"
OpExtension "SPV_KHR_cooperative_matrix"
OpExtension "SPV_KHR_float_controls"
OpMemoryModel Logical GLSL450
OpEntryPoint GLCompute %3 "main"
OpExecutionMode %3 LocalSize 32 1 1
OpExecutionMode %3 DenormPreserve 16
OpName %3 "main"
OpName %19 "SSBO"
OpName %23 "SSBO"
OpName %43 "CoopMatFP8toFP16"
OpName %46 "coop_output"
OpName %75 "CoopMatFP8toFP16"
OpName %78 "coop_output"
OpDecorate %18 ArrayStride 1
OpMemberDecorate %19 0 Offset 0
OpDecorate %19 Block
OpDecorate %21 DescriptorSet 0
OpDecorate %21 Binding 0
OpDecorate %21 NonWritable
OpDecorate %21 Restrict
OpDecorate %22 ArrayStride 1
OpMemberDecorate %23 0 Offset 0
OpDecorate %23 Block
OpDecorate %25 DescriptorSet 0
OpDecorate %25 Binding 0
OpDecorate %25 NonReadable
%1 = OpTypeVoid
%2 = OpTypeFunction %1
%5 = OpTypeInt 8 0
%6 = OpTypeInt 32 0
%7 = OpConstant %6 0
%8 = OpConstant %6 16
%10 = OpConstant %6 3
%9 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %7
%11 = OpConstant %6 1
%12 = OpTypeCooperativeMatrixKHR %5 %10 %8 %8 %11
%13 = OpTypeFloat 32
%14 = OpConstant %6 2
%15 = OpTypeCooperativeMatrixKHR %13 %10 %8 %8 %14
%16 = OpTypeFloat 16
%17 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %14
%18 = OpTypeRuntimeArray %5
%19 = OpTypeStruct %18
%20 = OpTypePointer StorageBuffer %19
%21 = OpVariable %20 StorageBuffer
%22 = OpTypeRuntimeArray %5
%23 = OpTypeStruct %22
%24 = OpTypePointer StorageBuffer %23
%25 = OpVariable %24 StorageBuffer
%27 = OpTypePointer StorageBuffer %5
%31 = OpConstant %6 256
%34 = OpConstant %6 512
%35 = OpConstant %6 64
%38 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %7
%39 = OpTypeBool
%40 = OpTypePointer Function %9
%41 = OpTypeFunction %38 %40
%45 = OpTypePointer Function %38
%52 = OpTypePointer Function %5
%55 = OpTypeInt 16 1
%58 = OpConstant %55 7
%60 = OpConstant %55 -16385
%62 = OpTypePointer Function %16
%67 = OpConstant %16 0x1p+8
%71 = OpTypeCooperativeMatrixKHR %16 %10 %8 %8 %11
%72 = OpTypePointer Function %12
%73 = OpTypeFunction %71 %72
%77 = OpTypePointer Function %71
%99 = OpConstant %6 32
%3 = OpFunction %1 None %2
%4 = OpLabel
%69 = OpVariable %40 Function
%95 = OpVariable %72 Function
OpBranch %100
%100 = OpLabel
%28 = OpAccessChain %27 %21 %7 %7
%29 = OpCooperativeMatrixLoadKHR %9 %28 %7 %8
%30 = OpAccessChain %27 %21 %7 %31
%32 = OpCooperativeMatrixLoadKHR %12 %30 %7 %8
%33 = OpAccessChain %27 %21 %7 %34
%36 = OpCooperativeMatrixLoadKHR %15 %33 %7 %35
OpStore %69 %29
%70 = OpFunctionCall %38 %43 %69
OpStore %95 %32
%96 = OpFunctionCall %71 %75 %95
%37 = OpCooperativeMatrixMulAddKHR %15 %70 %96 %36
%97 = OpFConvert %17 %37
%98 = OpAccessChain %27 %25 %7 %7
OpCooperativeMatrixStoreKHR %98 %97 %7 %99
OpReturn
OpFunctionEnd
%43 = OpFunction %38 None %41
%42 = OpFunctionParameter %40
%44 = OpLabel
%46 = OpVariable %45 Function
%47 = OpCooperativeMatrixLengthKHR %6 %9
OpBranch %48
%48 = OpLabel
%50 = OpPhi %6 %7 %44 %51 %48
%51 = OpIAdd %6 %50 %11
%53 = OpInBoundsAccessChain %52 %42 %50
%54 = OpLoad %5 %53
%56 = OpSConvert %55 %54
%57 = OpShiftLeftLogical %55 %56 %58
%59 = OpBitwiseAnd %55 %57 %60
%61 = OpBitcast %16 %59
%63 = OpInBoundsAccessChain %62 %46 %50
OpStore %63 %61
%64 = OpULessThan %39 %51 %47
OpLoopMerge %49 %48 None
OpBranchConditional %64 %48 %49
%49 = OpLabel
%65 = OpLoad %38 %46
%66 = OpMatrixTimesScalar %38 %65 %67
OpReturnValue %66
OpFunctionEnd
%75 = OpFunction %71 None %73
%74 = OpFunctionParameter %72
%76 = OpLabel
%78 = OpVariable %77 Function
%79 = OpCooperativeMatrixLengthKHR %6 %12
OpBranch %80
%80 = OpLabel
%82 = OpPhi %6 %7 %76 %83 %80
%83 = OpIAdd %6 %82 %11
%84 = OpInBoundsAccessChain %52 %74 %82
%85 = OpLoad %5 %84
%86 = OpSConvert %55 %85
%87 = OpShiftLeftLogical %55 %86 %58
%88 = OpBitwiseAnd %55 %87 %60
%89 = OpBitcast %16 %88
%90 = OpInBoundsAccessChain %62 %78 %82
OpStore %90 %89
%91 = OpULessThan %39 %83 %79
OpLoopMerge %81 %80 None
OpBranchConditional %91 %80 %81
%81 = OpLabel
%92 = OpLoad %71 %78
%93 = OpMatrixTimesScalar %71 %92 %67
OpReturnValue %93
OpFunctionEnd
#endif
